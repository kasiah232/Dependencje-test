export const getExcelColumnLabel = (index: number) => {
  let label = '';
  while (index >= 0) {
    label = String.fromCharCode((index % 26) + 65) + label;
    index = Math.floor(index / 26) - 1;
  }
  return label;
}

export const findCell = (coords: string, container: HTMLElement): HTMLElement | null => {
  return container.querySelector(`[qbris-cords="${coords}"]`) as HTMLElement || null;
}

export const getCellStyles = (cell: any): {[key: string]: string} => {
  const styles: {[key: string]: string} = {
    border: '1px solid lightgray'  // Domyślny kolor obramowania
  };

  if (cell && cell.s) {
    // Kolor tła komórki
    if (cell.s.fgColor && cell.s.fgColor.rgb) {
      styles.backgroundColor = `#${cell.s.fgColor.rgb}`;
    }

    // Pogrubienie
    if (cell.s.font && cell.s.font.bold) {
      styles.fontWeight = 'bold';
    }

    // Kolor tekstu
    if (cell.s.font && cell.s.font.color && cell.s.font.color.rgb) {
      styles.color = `#${cell.s.font.color.rgb}`;
    }

    // Pogrubienie krawędzi, jeśli nadpisane w Excelu
    if (cell.s.border) {
      if (cell.s.border.top) styles.borderTop = '2px solid black';
      if (cell.s.border.bottom) styles.borderBottom = '2px solid black';
      if (cell.s.border.left) styles.borderLeft = '2px solid black';
      if (cell.s.border.right) styles.borderRight = '2px solid black';
    }
  }
  return styles;
}

export const applyStyles = (cell: any, styles: {[key: string]: string}) => {
  for (const key of Object.keys(styles)) {
    cell.style[key] = styles[key];
  }
}
