(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './antlr-kotlin-antlr-kotlin-runtime.js', './kotlin-kotlin-stdlib.js', './yamlkt-root-yamlkt-js-ir.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./antlr-kotlin-antlr-kotlin-runtime.js'), require('./kotlin-kotlin-stdlib.js'), require('./yamlkt-root-yamlkt-js-ir.js'));
  else {
    if (typeof globalThis['antlr-kotlin-antlr-kotlin-runtime'] === 'undefined') {
      throw new Error("Error loading module 'io.github.freshmag:testo'. Its dependency 'antlr-kotlin-antlr-kotlin-runtime' was not found. Please, check whether 'antlr-kotlin-antlr-kotlin-runtime' is loaded prior to 'io.github.freshmag:testo'.");
    }
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'io.github.freshmag:testo'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'io.github.freshmag:testo'.");
    }
    if (typeof globalThis['yamlkt-root-yamlkt-js-ir'] === 'undefined') {
      throw new Error("Error loading module 'io.github.freshmag:testo'. Its dependency 'yamlkt-root-yamlkt-js-ir' was not found. Please, check whether 'yamlkt-root-yamlkt-js-ir' is loaded prior to 'io.github.freshmag:testo'.");
    }
    globalThis['io.github.freshmag:testo'] = factory(typeof globalThis['io.github.freshmag:testo'] === 'undefined' ? {} : globalThis['io.github.freshmag:testo'], globalThis['antlr-kotlin-antlr-kotlin-runtime'], globalThis['kotlin-kotlin-stdlib'], globalThis['yamlkt-root-yamlkt-js-ir']);
  }
}(function (_, kotlin_com_strumenta_antlr_kotlin_runtime, kotlin_kotlin, kotlin_net_mamoe_yamlkt_yamlkt) {
  'use strict';
  //region block: imports
  var AbstractParseTreeVisitor = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.j;
  var protoOf = kotlin_kotlin.$_$.i4;
  var initMetadataForClass = kotlin_kotlin.$_$.w3;
  var VOID = kotlin_kotlin.$_$.c;
  var RuntimeMetaData_instance = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.d;
  var Unit_instance = kotlin_kotlin.$_$.o1;
  var ATNDeserializer = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.e;
  var toCharArray = kotlin_kotlin.$_$.k5;
  var fillArrayVal = kotlin_kotlin.$_$.s3;
  var ensureNotNull = kotlin_kotlin.$_$.a6;
  var DFA = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.i;
  var PredictionContextCache = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.h;
  var VocabularyImpl = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.q;
  var initMetadataForCompanion = kotlin_kotlin.$_$.x3;
  var Lexer = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.m;
  var LexerATNSimulator = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.f;
  var initMetadataForInterface = kotlin_kotlin.$_$.y3;
  var ParserRuleContext_init_$Init$ = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.b;
  var objectCreate = kotlin_kotlin.$_$.h4;
  var ParserRuleContext_init_$Init$_0 = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.a;
  var ParserRuleContext = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.n;
  var isInterface = kotlin_kotlin.$_$.d4;
  var FailedPredicateException = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.l;
  var RecognitionException = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.p;
  var Parser = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.o;
  var ParserATNSimulator = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.g;
  var THROW_CCE = kotlin_kotlin.$_$.y5;
  var Default_getInstance = kotlin_net_mamoe_yamlkt_yamlkt.$_$.a;
  var CharStreams_getInstance = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.c;
  var CommonTokenStream = kotlin_com_strumenta_antlr_kotlin_runtime.$_$.k;
  var println = kotlin_kotlin.$_$.j3;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(ExpressionVisitor, 'ExpressionVisitor');
  initMetadataForClass(ExpressionBaseVisitor, 'ExpressionBaseVisitor', VOID, AbstractParseTreeVisitor, [AbstractParseTreeVisitor, ExpressionVisitor]);
  initMetadataForCompanion(Companion);
  initMetadataForClass(ExpressionLexer, 'ExpressionLexer', VOID, Lexer);
  initMetadataForInterface(ExpressionListener, 'ExpressionListener');
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(ExpressionContext, 'ExpressionContext', ExpressionContext_init_$Create$_0, ParserRuleContext);
  initMetadataForClass(CallContext, 'CallContext', VOID, ExpressionContext);
  initMetadataForClass(ModuleCallContext, 'ModuleCallContext', VOID, ExpressionContext);
  initMetadataForClass(VariableContext, 'VariableContext', VOID, ExpressionContext);
  initMetadataForClass(PlusExprContext, 'PlusExprContext', VOID, ExpressionContext);
  initMetadataForClass(LiteralContext, 'LiteralContext', VOID, ExpressionContext);
  initMetadataForClass(MacroCallContext, 'MacroCallContext', VOID, ParserRuleContext);
  initMetadataForClass(DotCallContext, 'DotCallContext', VOID, ParserRuleContext);
  initMetadataForClass(ExpressionParser, 'ExpressionParser', VOID, Parser);
  initMetadataForClass(LoggingExpressionVisitor, 'LoggingExpressionVisitor', LoggingExpressionVisitor, ExpressionBaseVisitor);
  //endregion
  function ExpressionBaseVisitor() {
    AbstractParseTreeVisitor.call(this);
  }
  protoOf(ExpressionBaseVisitor).e1p = function (ctx) {
    return this.rs(ctx);
  };
  protoOf(ExpressionBaseVisitor).f1p = function (ctx) {
    return this.rs(ctx);
  };
  protoOf(ExpressionBaseVisitor).g1p = function (ctx) {
    return this.rs(ctx);
  };
  protoOf(ExpressionBaseVisitor).h1p = function (ctx) {
    return this.rs(ctx);
  };
  protoOf(ExpressionBaseVisitor).i1p = function (ctx) {
    return this.rs(ctx);
  };
  protoOf(ExpressionBaseVisitor).j1p = function (ctx) {
    return this.rs(ctx);
  };
  protoOf(ExpressionBaseVisitor).k1p = function (ctx) {
    return this.rs(ctx);
  };
  function Companion() {
    Companion_instance = this;
    RuntimeMetaData_instance.ts('4.13.1', '4.13.1');
    this.l1p_1 = '\x04\x00\nR\x06\uFFFF\uFFFF\x02\x00\x07\x00\x02\x01\x07\x01\x02\x02\x07\x02\x02\x03\x07\x03\x02\x04\x07\x04\x02\x05\x07\x05\x02\x06\x07\x06\x02\x07\x07\x07\x02\b\x07\b\x02\t\x07\t\x01\x00\x01\x00\x01\x01\x01\x01\x01\x02\x01\x02\x01\x03\x01\x03\x01\x04\x01\x04\x01\x05\x01\x05\x01\x05\x05\x05#\b\x05\n\x05\f\x05&\t\x05\x01\x05\x01\x05\x01\x05\x01\x05\x05\x05,\b\x05\n\x05\f\x05/\t\x05\x01\x05\x03\x052\b\x05\x01\x06\x01\x06\x01\x06\x01\x07\x01\x07\x05\x079\b\x07\n\x07\f\x07<\t\x07\x01\b\x04\b?\b\b\x0B\b\f\b@\x01\b\x01\b\x01\t\x01\t\x01\t\x01\t\x05\tI\b\t\n\t\f\tL\t\t\x01\t\x01\t\x01\t\x01\t\x01\t\x01J\x00\n\x01\x01\x03\x02\x05\x03\x07\x04\t\x05\x0B\x06\r\x07\x0F\b\x11\t\x13\n\x01\x00\x05\x04\x00\n\n\r\r""\\\\\x04\x00\n\n\r\r\'\'\\\\\x02\x00AZaz\x04\x0009AZ__az\x03\x00\t\n\r\r  Y\x00\x01\x01\x00\x00\x00\x00\x03\x01\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x07\x01\x00\x00\x00\x00\t\x01\x00\x00\x00\x00\x0B\x01\x00\x00\x00\x00\r\x01\x00\x00\x00\x00\x0F\x01\x00\x00\x00\x00\x11\x01\x00\x00\x00\x00\x13\x01\x00\x00\x00\x01\x15\x01\x00\x00\x00\x03\x17\x01\x00\x00\x00\x05\x19\x01\x00\x00\x00\x07\x1B\x01\x00\x00\x00\t\x1D\x01\x00\x00\x00\x0B1\x01\x00\x00\x00\r3\x01\x00\x00\x00\x0F6\x01\x00\x00\x00\x11>\x01\x00\x00\x00\x13D\x01\x00\x00\x00\x15\x16\x05+\x00\x00\x16\x02\x01\x00\x00\x00\x17\x18\x05(\x00\x00\x18\x04\x01\x00\x00\x00\x19\x1A\x05,\x00\x00\x1A\x06\x01\x00\x00\x00\x1B\x1C\x05)\x00\x00\x1C\b\x01\x00\x00\x00\x1D\x1E\x05.\x00\x00\x1E\n\x01\x00\x00\x00\x1F$\x05"\x00\x00 #\x03\r\x06\x00!#\b\x00\x00\x00" \x01\x00\x00\x00"!\x01\x00\x00\x00#&\x01\x00\x00\x00$"\x01\x00\x00\x00$%\x01\x00\x00\x00%\'\x01\x00\x00\x00&$\x01\x00\x00\x00\'2\x05"\x00\x00(-\x05\'\x00\x00),\x03\r\x06\x00*,\b\x01\x00\x00+)\x01\x00\x00\x00+*\x01\x00\x00\x00,/\x01\x00\x00\x00-+\x01\x00\x00\x00-.\x01\x00\x00\x00.0\x01\x00\x00\x00/-\x01\x00\x00\x0002\x05\'\x00\x001\x1F\x01\x00\x00\x001(\x01\x00\x00\x002\f\x01\x00\x00\x0034\x05\\\x00\x0045\t\x00\x00\x005\x0E\x01\x00\x00\x006:\x07\x02\x00\x0079\x07\x03\x00\x0087\x01\x00\x00\x009<\x01\x00\x00\x00:8\x01\x00\x00\x00:;\x01\x00\x00\x00;\x10\x01\x00\x00\x00<:\x01\x00\x00\x00=?\x07\x04\x00\x00>=\x01\x00\x00\x00?@\x01\x00\x00\x00@>\x01\x00\x00\x00@A\x01\x00\x00\x00AB\x01\x00\x00\x00BC\x06\b\x00\x00C\x12\x01\x00\x00\x00DE\x05/\x00\x00EF\x05*\x00\x00FJ\x01\x00\x00\x00GI\t\x00\x00\x00HG\x01\x00\x00\x00IL\x01\x00\x00\x00JK\x01\x00\x00\x00JH\x01\x00\x00\x00KM\x01\x00\x00\x00LJ\x01\x00\x00\x00MN\x05*\x00\x00NO\x05/\x00\x00OP\x01\x00\x00\x00PQ\x06\t\x00\x00Q\x14\x01\x00\x00\x00\t\x00"$+-1:@J\x01\x00\x01\x00';
    this.m1p_1 = (new ATNDeserializer()).xw(toCharArray('\x04\x00\nR\x06\uFFFF\uFFFF\x02\x00\x07\x00\x02\x01\x07\x01\x02\x02\x07\x02\x02\x03\x07\x03\x02\x04\x07\x04\x02\x05\x07\x05\x02\x06\x07\x06\x02\x07\x07\x07\x02\b\x07\b\x02\t\x07\t\x01\x00\x01\x00\x01\x01\x01\x01\x01\x02\x01\x02\x01\x03\x01\x03\x01\x04\x01\x04\x01\x05\x01\x05\x01\x05\x05\x05#\b\x05\n\x05\f\x05&\t\x05\x01\x05\x01\x05\x01\x05\x01\x05\x05\x05,\b\x05\n\x05\f\x05/\t\x05\x01\x05\x03\x052\b\x05\x01\x06\x01\x06\x01\x06\x01\x07\x01\x07\x05\x079\b\x07\n\x07\f\x07<\t\x07\x01\b\x04\b?\b\b\x0B\b\f\b@\x01\b\x01\b\x01\t\x01\t\x01\t\x01\t\x05\tI\b\t\n\t\f\tL\t\t\x01\t\x01\t\x01\t\x01\t\x01\t\x01J\x00\n\x01\x01\x03\x02\x05\x03\x07\x04\t\x05\x0B\x06\r\x07\x0F\b\x11\t\x13\n\x01\x00\x05\x04\x00\n\n\r\r""\\\\\x04\x00\n\n\r\r\'\'\\\\\x02\x00AZaz\x04\x0009AZ__az\x03\x00\t\n\r\r  Y\x00\x01\x01\x00\x00\x00\x00\x03\x01\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x07\x01\x00\x00\x00\x00\t\x01\x00\x00\x00\x00\x0B\x01\x00\x00\x00\x00\r\x01\x00\x00\x00\x00\x0F\x01\x00\x00\x00\x00\x11\x01\x00\x00\x00\x00\x13\x01\x00\x00\x00\x01\x15\x01\x00\x00\x00\x03\x17\x01\x00\x00\x00\x05\x19\x01\x00\x00\x00\x07\x1B\x01\x00\x00\x00\t\x1D\x01\x00\x00\x00\x0B1\x01\x00\x00\x00\r3\x01\x00\x00\x00\x0F6\x01\x00\x00\x00\x11>\x01\x00\x00\x00\x13D\x01\x00\x00\x00\x15\x16\x05+\x00\x00\x16\x02\x01\x00\x00\x00\x17\x18\x05(\x00\x00\x18\x04\x01\x00\x00\x00\x19\x1A\x05,\x00\x00\x1A\x06\x01\x00\x00\x00\x1B\x1C\x05)\x00\x00\x1C\b\x01\x00\x00\x00\x1D\x1E\x05.\x00\x00\x1E\n\x01\x00\x00\x00\x1F$\x05"\x00\x00 #\x03\r\x06\x00!#\b\x00\x00\x00" \x01\x00\x00\x00"!\x01\x00\x00\x00#&\x01\x00\x00\x00$"\x01\x00\x00\x00$%\x01\x00\x00\x00%\'\x01\x00\x00\x00&$\x01\x00\x00\x00\'2\x05"\x00\x00(-\x05\'\x00\x00),\x03\r\x06\x00*,\b\x01\x00\x00+)\x01\x00\x00\x00+*\x01\x00\x00\x00,/\x01\x00\x00\x00-+\x01\x00\x00\x00-.\x01\x00\x00\x00.0\x01\x00\x00\x00/-\x01\x00\x00\x0002\x05\'\x00\x001\x1F\x01\x00\x00\x001(\x01\x00\x00\x002\f\x01\x00\x00\x0034\x05\\\x00\x0045\t\x00\x00\x005\x0E\x01\x00\x00\x006:\x07\x02\x00\x0079\x07\x03\x00\x0087\x01\x00\x00\x009<\x01\x00\x00\x00:8\x01\x00\x00\x00:;\x01\x00\x00\x00;\x10\x01\x00\x00\x00<:\x01\x00\x00\x00=?\x07\x04\x00\x00>=\x01\x00\x00\x00?@\x01\x00\x00\x00@>\x01\x00\x00\x00@A\x01\x00\x00\x00AB\x01\x00\x00\x00BC\x06\b\x00\x00C\x12\x01\x00\x00\x00DE\x05/\x00\x00EF\x05*\x00\x00FJ\x01\x00\x00\x00GI\t\x00\x00\x00HG\x01\x00\x00\x00IL\x01\x00\x00\x00JK\x01\x00\x00\x00JH\x01\x00\x00\x00KM\x01\x00\x00\x00LJ\x01\x00\x00\x00MN\x05*\x00\x00NO\x05/\x00\x00OP\x01\x00\x00\x00PQ\x06\t\x00\x00Q\x14\x01\x00\x00\x00\t\x00"$+-1:@J\x01\x00\x01\x00'));
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = this.m1p_1.ht();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = fillArrayVal(Array(tmp_1), null);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = new DFA(ensureNotNull(Companion_getInstance().m1p_1.wt(tmp_3)), tmp_3);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.n1p_1 = tmp_2;
    this.o1p_1 = new PredictionContextCache();
    var tmp_4 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_4.p1p_1 = [null, "'+'", "'('", "','", "')'", "'.'"];
    var tmp_5 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_5.q1p_1 = [null, null, null, null, null, null, 'STRING', 'ESC', 'ID', 'WHITESP', 'COMMENT'];
    this.r1p_1 = new VocabularyImpl(this.p1p_1, this.q1p_1);
  }
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function ExpressionLexer(input) {
    Companion_getInstance();
    Lexer.call(this, input);
    this.k1q_1 = new LexerATNSimulator(this, Companion_getInstance().m1p_1, Companion_getInstance().n1p_1, Companion_getInstance().o1p_1);
    this.l1q_1 = 'Expression.g4';
    this.m1q_1 = Companion_getInstance().m1p_1;
    this.n1q_1 = Companion_getInstance().r1p_1;
    this.o1q_1 = '\x04\x00\nR\x06\uFFFF\uFFFF\x02\x00\x07\x00\x02\x01\x07\x01\x02\x02\x07\x02\x02\x03\x07\x03\x02\x04\x07\x04\x02\x05\x07\x05\x02\x06\x07\x06\x02\x07\x07\x07\x02\b\x07\b\x02\t\x07\t\x01\x00\x01\x00\x01\x01\x01\x01\x01\x02\x01\x02\x01\x03\x01\x03\x01\x04\x01\x04\x01\x05\x01\x05\x01\x05\x05\x05#\b\x05\n\x05\f\x05&\t\x05\x01\x05\x01\x05\x01\x05\x01\x05\x05\x05,\b\x05\n\x05\f\x05/\t\x05\x01\x05\x03\x052\b\x05\x01\x06\x01\x06\x01\x06\x01\x07\x01\x07\x05\x079\b\x07\n\x07\f\x07<\t\x07\x01\b\x04\b?\b\b\x0B\b\f\b@\x01\b\x01\b\x01\t\x01\t\x01\t\x01\t\x05\tI\b\t\n\t\f\tL\t\t\x01\t\x01\t\x01\t\x01\t\x01\t\x01J\x00\n\x01\x01\x03\x02\x05\x03\x07\x04\t\x05\x0B\x06\r\x07\x0F\b\x11\t\x13\n\x01\x00\x05\x04\x00\n\n\r\r""\\\\\x04\x00\n\n\r\r\'\'\\\\\x02\x00AZaz\x04\x0009AZ__az\x03\x00\t\n\r\r  Y\x00\x01\x01\x00\x00\x00\x00\x03\x01\x00\x00\x00\x00\x05\x01\x00\x00\x00\x00\x07\x01\x00\x00\x00\x00\t\x01\x00\x00\x00\x00\x0B\x01\x00\x00\x00\x00\r\x01\x00\x00\x00\x00\x0F\x01\x00\x00\x00\x00\x11\x01\x00\x00\x00\x00\x13\x01\x00\x00\x00\x01\x15\x01\x00\x00\x00\x03\x17\x01\x00\x00\x00\x05\x19\x01\x00\x00\x00\x07\x1B\x01\x00\x00\x00\t\x1D\x01\x00\x00\x00\x0B1\x01\x00\x00\x00\r3\x01\x00\x00\x00\x0F6\x01\x00\x00\x00\x11>\x01\x00\x00\x00\x13D\x01\x00\x00\x00\x15\x16\x05+\x00\x00\x16\x02\x01\x00\x00\x00\x17\x18\x05(\x00\x00\x18\x04\x01\x00\x00\x00\x19\x1A\x05,\x00\x00\x1A\x06\x01\x00\x00\x00\x1B\x1C\x05)\x00\x00\x1C\b\x01\x00\x00\x00\x1D\x1E\x05.\x00\x00\x1E\n\x01\x00\x00\x00\x1F$\x05"\x00\x00 #\x03\r\x06\x00!#\b\x00\x00\x00" \x01\x00\x00\x00"!\x01\x00\x00\x00#&\x01\x00\x00\x00$"\x01\x00\x00\x00$%\x01\x00\x00\x00%\'\x01\x00\x00\x00&$\x01\x00\x00\x00\'2\x05"\x00\x00(-\x05\'\x00\x00),\x03\r\x06\x00*,\b\x01\x00\x00+)\x01\x00\x00\x00+*\x01\x00\x00\x00,/\x01\x00\x00\x00-+\x01\x00\x00\x00-.\x01\x00\x00\x00.0\x01\x00\x00\x00/-\x01\x00\x00\x0002\x05\'\x00\x001\x1F\x01\x00\x00\x001(\x01\x00\x00\x002\f\x01\x00\x00\x0034\x05\\\x00\x0045\t\x00\x00\x005\x0E\x01\x00\x00\x006:\x07\x02\x00\x0079\x07\x03\x00\x0087\x01\x00\x00\x009<\x01\x00\x00\x00:8\x01\x00\x00\x00:;\x01\x00\x00\x00;\x10\x01\x00\x00\x00<:\x01\x00\x00\x00=?\x07\x04\x00\x00>=\x01\x00\x00\x00?@\x01\x00\x00\x00@>\x01\x00\x00\x00@A\x01\x00\x00\x00AB\x01\x00\x00\x00BC\x06\b\x00\x00C\x12\x01\x00\x00\x00DE\x05/\x00\x00EF\x05*\x00\x00FJ\x01\x00\x00\x00GI\t\x00\x00\x00HG\x01\x00\x00\x00IL\x01\x00\x00\x00JK\x01\x00\x00\x00JH\x01\x00\x00\x00KM\x01\x00\x00\x00LJ\x01\x00\x00\x00MN\x05*\x00\x00NO\x05/\x00\x00OP\x01\x00\x00\x00PQ\x06\t\x00\x00Q\x14\x01\x00\x00\x00\t\x00"$+-1:@J\x01\x00\x01\x00';
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.p1q_1 = ['T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'STRING', 'ESC', 'ID', 'WHITESP', 'COMMENT'];
    var tmp_0 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_0.q1q_1 = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];
    var tmp_1 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_1.r1q_1 = ['DEFAULT_MODE'];
  }
  protoOf(ExpressionLexer).pk = function () {
    return this.k1q_1;
  };
  protoOf(ExpressionLexer).qk = function () {
    return this.m1q_1;
  };
  protoOf(ExpressionLexer).di = function () {
    return this.n1q_1;
  };
  protoOf(ExpressionLexer).ol = function () {
    return this.p1q_1;
  };
  function ExpressionListener() {
  }
  function ExpressionContext_init_$Init$(parent, invokingState, $this) {
    ParserRuleContext_init_$Init$(parent, invokingState, $this);
    ExpressionContext.call($this);
    return $this;
  }
  function ExpressionContext_init_$Create$(parent, invokingState) {
    return ExpressionContext_init_$Init$(parent, invokingState, objectCreate(protoOf(ExpressionContext)));
  }
  function ExpressionContext_init_$Init$_0($this) {
    ParserRuleContext_init_$Init$_0($this);
    ExpressionContext.call($this);
    return $this;
  }
  function ExpressionContext_init_$Create$_0() {
    return ExpressionContext_init_$Init$_0(objectCreate(protoOf(ExpressionContext)));
  }
  function CallContext_init_$Init$(ctx, $this) {
    ExpressionContext_init_$Init$_0($this);
    CallContext.call($this);
    $this.q1r(ctx);
    return $this;
  }
  function CallContext_init_$Create$(ctx) {
    return CallContext_init_$Init$(ctx, objectCreate(protoOf(CallContext)));
  }
  function ModuleCallContext_init_$Init$(ctx, $this) {
    ExpressionContext_init_$Init$_0($this);
    ModuleCallContext.call($this);
    $this.q1r(ctx);
    return $this;
  }
  function ModuleCallContext_init_$Create$(ctx) {
    return ModuleCallContext_init_$Init$(ctx, objectCreate(protoOf(ModuleCallContext)));
  }
  function VariableContext_init_$Init$(ctx, $this) {
    ExpressionContext_init_$Init$_0($this);
    VariableContext.call($this);
    $this.q1r(ctx);
    return $this;
  }
  function VariableContext_init_$Create$(ctx) {
    return VariableContext_init_$Init$(ctx, objectCreate(protoOf(VariableContext)));
  }
  function PlusExprContext_init_$Init$(ctx, $this) {
    ExpressionContext_init_$Init$_0($this);
    PlusExprContext.call($this);
    $this.q1r(ctx);
    return $this;
  }
  function PlusExprContext_init_$Create$(ctx) {
    return PlusExprContext_init_$Init$(ctx, objectCreate(protoOf(PlusExprContext)));
  }
  function LiteralContext_init_$Init$(ctx, $this) {
    ExpressionContext_init_$Init$_0($this);
    LiteralContext.call($this);
    $this.q1r(ctx);
    return $this;
  }
  function LiteralContext_init_$Create$(ctx) {
    return LiteralContext_init_$Init$(ctx, objectCreate(protoOf(LiteralContext)));
  }
  function MacroCallContext_init_$Init$(parent, invokingState, $this) {
    ParserRuleContext_init_$Init$(parent, invokingState, $this);
    MacroCallContext.call($this);
    return $this;
  }
  function MacroCallContext_init_$Create$(parent, invokingState) {
    return MacroCallContext_init_$Init$(parent, invokingState, objectCreate(protoOf(MacroCallContext)));
  }
  function DotCallContext_init_$Init$(parent, invokingState, $this) {
    ParserRuleContext_init_$Init$(parent, invokingState, $this);
    DotCallContext.call($this);
    return $this;
  }
  function DotCallContext_init_$Create$(parent, invokingState) {
    return DotCallContext_init_$Init$(parent, invokingState, objectCreate(protoOf(DotCallContext)));
  }
  function Companion_0() {
    Companion_instance_0 = this;
    RuntimeMetaData_instance.ts('4.13.1', '4.13.1');
    this.r1r_1 = '\x04\x01\n4\x02\x00\x07\x00\x02\x01\x07\x01\x02\x02\x07\x02\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x03\x00\f\b\x00\x01\x00\x01\x00\x01\x00\x05\x00\x11\b\x00\n\x00\f\x00\x14\t\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x1B\b\x01\n\x01\f\x01\x1E\t\x01\x03\x01 \b\x01\x01\x01\x01\x01\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x05\x02+\b\x02\n\x02\f\x02.\t\x02\x03\x020\b\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x03\x00\x02\x04\x00\x008\x00\x0B\x01\x00\x00\x00\x02\x15\x01\x00\x00\x00\x04#\x01\x00\x00\x00\x06\x07\x06\x00\uFFFF\uFFFF\x00\x07\f\x03\x02\x01\x00\b\f\x03\x04\x02\x00\t\f\x05\b\x00\x00\n\f\x05\x06\x00\x00\x0B\x06\x01\x00\x00\x00\x0B\b\x01\x00\x00\x00\x0B\t\x01\x00\x00\x00\x0B\n\x01\x00\x00\x00\f\x12\x01\x00\x00\x00\r\x0E\n\x05\x00\x00\x0E\x0F\x05\x01\x00\x00\x0F\x11\x03\x00\x00\x06\x10\r\x01\x00\x00\x00\x11\x14\x01\x00\x00\x00\x12\x10\x01\x00\x00\x00\x12\x13\x01\x00\x00\x00\x13\x01\x01\x00\x00\x00\x14\x12\x01\x00\x00\x00\x15\x16\x05\b\x00\x00\x16\x1F\x05\x02\x00\x00\x17\x1C\x03\x00\x00\x00\x18\x19\x05\x03\x00\x00\x19\x1B\x03\x00\x00\x00\x1A\x18\x01\x00\x00\x00\x1B\x1E\x01\x00\x00\x00\x1C\x1A\x01\x00\x00\x00\x1C\x1D\x01\x00\x00\x00\x1D \x01\x00\x00\x00\x1E\x1C\x01\x00\x00\x00\x1F\x17\x01\x00\x00\x00\x1F \x01\x00\x00\x00 !\x01\x00\x00\x00!"\x05\x04\x00\x00"\x03\x01\x00\x00\x00#$\x05\b\x00\x00$%\x05\x05\x00\x00%&\x05\b\x00\x00&/\x05\x02\x00\x00\',\x03\x00\x00\x00()\x05\x03\x00\x00)+\x03\x00\x00\x00*(\x01\x00\x00\x00+.\x01\x00\x00\x00,*\x01\x00\x00\x00,-\x01\x00\x00\x00-0\x01\x00\x00\x00.,\x01\x00\x00\x00/\'\x01\x00\x00\x00/0\x01\x00\x00\x0001\x01\x00\x00\x0012\x05\x04\x00\x002\x05\x01\x00\x00\x00\x06\x0B\x12\x1C\x1F,/';
    this.s1r_1 = (new ATNDeserializer()).xw(toCharArray('\x04\x01\n4\x02\x00\x07\x00\x02\x01\x07\x01\x02\x02\x07\x02\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x03\x00\f\b\x00\x01\x00\x01\x00\x01\x00\x05\x00\x11\b\x00\n\x00\f\x00\x14\t\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x1B\b\x01\n\x01\f\x01\x1E\t\x01\x03\x01 \b\x01\x01\x01\x01\x01\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x05\x02+\b\x02\n\x02\f\x02.\t\x02\x03\x020\b\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x03\x00\x02\x04\x00\x008\x00\x0B\x01\x00\x00\x00\x02\x15\x01\x00\x00\x00\x04#\x01\x00\x00\x00\x06\x07\x06\x00\uFFFF\uFFFF\x00\x07\f\x03\x02\x01\x00\b\f\x03\x04\x02\x00\t\f\x05\b\x00\x00\n\f\x05\x06\x00\x00\x0B\x06\x01\x00\x00\x00\x0B\b\x01\x00\x00\x00\x0B\t\x01\x00\x00\x00\x0B\n\x01\x00\x00\x00\f\x12\x01\x00\x00\x00\r\x0E\n\x05\x00\x00\x0E\x0F\x05\x01\x00\x00\x0F\x11\x03\x00\x00\x06\x10\r\x01\x00\x00\x00\x11\x14\x01\x00\x00\x00\x12\x10\x01\x00\x00\x00\x12\x13\x01\x00\x00\x00\x13\x01\x01\x00\x00\x00\x14\x12\x01\x00\x00\x00\x15\x16\x05\b\x00\x00\x16\x1F\x05\x02\x00\x00\x17\x1C\x03\x00\x00\x00\x18\x19\x05\x03\x00\x00\x19\x1B\x03\x00\x00\x00\x1A\x18\x01\x00\x00\x00\x1B\x1E\x01\x00\x00\x00\x1C\x1A\x01\x00\x00\x00\x1C\x1D\x01\x00\x00\x00\x1D \x01\x00\x00\x00\x1E\x1C\x01\x00\x00\x00\x1F\x17\x01\x00\x00\x00\x1F \x01\x00\x00\x00 !\x01\x00\x00\x00!"\x05\x04\x00\x00"\x03\x01\x00\x00\x00#$\x05\b\x00\x00$%\x05\x05\x00\x00%&\x05\b\x00\x00&/\x05\x02\x00\x00\',\x03\x00\x00\x00()\x05\x03\x00\x00)+\x03\x00\x00\x00*(\x01\x00\x00\x00+.\x01\x00\x00\x00,*\x01\x00\x00\x00,-\x01\x00\x00\x00-0\x01\x00\x00\x00.,\x01\x00\x00\x00/\'\x01\x00\x00\x00/0\x01\x00\x00\x0001\x01\x00\x00\x0012\x05\x04\x00\x002\x05\x01\x00\x00\x00\x06\x0B\x12\x1C\x1F,/'));
    var tmp = this;
    var tmp_0 = 0;
    var tmp_1 = this.s1r_1.ht();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_2 = fillArrayVal(Array(tmp_1), null);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      tmp_2[tmp_3] = new DFA(ensureNotNull(Companion_getInstance_0().s1r_1.wt(tmp_3)), tmp_3);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.t1r_1 = tmp_2;
    this.u1r_1 = new PredictionContextCache();
    var tmp_4 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_4.v1r_1 = ['expression', 'macroCall', 'dotCall'];
    var tmp_5 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_5.w1r_1 = [null, "'+'", "'('", "','", "')'", "'.'"];
    var tmp_6 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_6.x1r_1 = [null, null, null, null, null, null, 'STRING', 'ESC', 'ID', 'WHITESP', 'COMMENT'];
    this.y1r_1 = new VocabularyImpl(this.w1r_1, this.x1r_1);
    var tmp_7 = this;
    var tmp_8 = 0;
    var tmp_9 = this.x1r_1.length;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_10 = fillArrayVal(Array(tmp_9), null);
    while (tmp_8 < tmp_9) {
      var tmp_11 = tmp_8;
      var tmp0_elvis_lhs = Companion_getInstance_0().y1r_1.et(tmp_11);
      var tmp1_elvis_lhs = tmp0_elvis_lhs == null ? Companion_getInstance_0().y1r_1.ft(tmp_11) : tmp0_elvis_lhs;
      tmp_10[tmp_11] = tmp1_elvis_lhs == null ? '<INVALID>' : tmp1_elvis_lhs;
      tmp_8 = tmp_8 + 1 | 0;
    }
    tmp_7.z1r_1 = tmp_10;
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  protoOf(ExpressionContext).ul = function () {
    return this.p1r_1;
  };
  protoOf(ExpressionContext).q1r = function (ctx) {
    protoOf(ParserRuleContext).fs.call(this, ctx);
  };
  function ExpressionContext() {
    this.p1r_1 = 0;
  }
  protoOf(CallContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.s1q(this);
    }
  };
  protoOf(CallContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.t1q(this);
    }
  };
  protoOf(CallContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.e1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function CallContext() {
  }
  protoOf(ModuleCallContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.u1q(this);
    }
  };
  protoOf(ModuleCallContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.v1q(this);
    }
  };
  protoOf(ModuleCallContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.f1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function ModuleCallContext() {
  }
  protoOf(VariableContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.w1q(this);
    }
  };
  protoOf(VariableContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.x1q(this);
    }
  };
  protoOf(VariableContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.g1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function VariableContext() {
  }
  protoOf(PlusExprContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.y1q(this);
    }
  };
  protoOf(PlusExprContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.z1q(this);
    }
  };
  protoOf(PlusExprContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.h1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function PlusExprContext() {
  }
  protoOf(LiteralContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.a1r(this);
    }
  };
  protoOf(LiteralContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.b1r(this);
    }
  };
  protoOf(LiteralContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.i1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function LiteralContext() {
  }
  function expression($this, _p) {
    var _parentctx = $this.kj_1;
    var _parentState = $this.ci_1;
    var _localctx = ExpressionContext_init_$Create$($this.kj_1, _parentState);
    var _prevctx = _localctx;
    var _startState = 0;
    var _token;
    var _ctx;
    $this.xr(_localctx, 0, 0, _p);
    try {
      var _alt;
      $this.ur(_localctx, 1);
      $this.ci_1 = 11;
      $this.hj_1.ck($this);
      switch ($this.pk().z16($this.ij_1, 0, $this.kj_1)) {
        case 1:
          _localctx = CallContext_init_$Create$(_localctx);
          $this.kj_1 = _localctx;
          _prevctx = _localctx;
          $this.ci_1 = 7;
          $this.r1u();
          break;
        case 2:
          _localctx = ModuleCallContext_init_$Create$(_localctx);
          $this.kj_1 = _localctx;
          _prevctx = _localctx;
          $this.ci_1 = 8;
          $this.s1u();
          break;
        case 3:
          _localctx = VariableContext_init_$Create$(_localctx);
          $this.kj_1 = _localctx;
          _prevctx = _localctx;
          $this.ci_1 = 9;
          $this.uq(8);
          break;
        case 4:
          _localctx = LiteralContext_init_$Create$(_localctx);
          $this.kj_1 = _localctx;
          _prevctx = _localctx;
          $this.ci_1 = 10;
          $this.uq(6);
          break;
      }
      ensureNotNull($this.kj_1).dr_1 = $this.ij_1.og(-1);
      $this.ci_1 = 18;
      $this.hj_1.ck($this);
      _alt = $this.pk().z16($this.ij_1, 1, $this.kj_1);
      while (!(_alt === 2) && !(_alt === 0)) {
        if (_alt === 1) {
          // Inline function 'kotlin.collections.isNotEmpty' call
          if (!$this.nj_1.r()) {
            $this.jr();
          }
          _prevctx = _localctx;
          _localctx = PlusExprContext_init_$Create$(ExpressionContext_init_$Create$(_parentctx, _parentState));
          $this.yr(_localctx, _startState, 0);
          $this.ci_1 = 13;
          if (!$this.up(ensureNotNull($this.kj_1), 5)) {
            throw new FailedPredicateException($this, 'precpred(context!!, 5)');
          }
          $this.ci_1 = 14;
          $this.uq(1);
          $this.ci_1 = 15;
          expression($this, 6);
        }
        $this.ci_1 = 20;
        $this.hj_1.ck($this);
        _alt = $this.pk().z16($this.ij_1, 1, $this.kj_1);
      }
    } catch ($p) {
      if ($p instanceof RecognitionException) {
        var re = $p;
        _localctx.er_1 = re;
        $this.hj_1.yi($this, re);
        $this.hj_1.uj($this, re);
      } else {
        throw $p;
      }
    }
    finally {
      $this.as(_parentctx);
    }
    return _localctx;
  }
  protoOf(MacroCallContext).ul = function () {
    return this.c1v_1;
  };
  protoOf(MacroCallContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.c1r(this);
    }
  };
  protoOf(MacroCallContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.d1r(this);
    }
  };
  protoOf(MacroCallContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.j1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function MacroCallContext() {
    this.c1v_1 = 1;
  }
  protoOf(DotCallContext).ul = function () {
    return this.m1v_1;
  };
  protoOf(DotCallContext).ir = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.e1r(this);
    }
  };
  protoOf(DotCallContext).kr = function (listener) {
    if (isInterface(listener, ExpressionListener)) {
      listener.f1r(this);
    }
  };
  protoOf(DotCallContext).is = function (visitor) {
    var tmp;
    if (isInterface(visitor, ExpressionVisitor)) {
      tmp = visitor.k1p(this);
    } else {
      tmp = visitor.rs(this);
    }
    return tmp;
  };
  function DotCallContext() {
    this.m1v_1 = 2;
  }
  function expression_sempred($this, _localctx, predIndex) {
    if (predIndex === 0)
      return $this.up(ensureNotNull($this.kj_1), 5);
    return true;
  }
  function ExpressionParser(input) {
    Companion_getInstance_0();
    Parser.call(this, input);
    this.k1u_1 = new ParserATNSimulator(this, Companion_getInstance_0().s1r_1, Companion_getInstance_0().t1r_1, Companion_getInstance_0().u1r_1);
    this.l1u_1 = 'Expression.g4';
    this.m1u_1 = Companion_getInstance_0().z1r_1;
    this.n1u_1 = Companion_getInstance_0().v1r_1;
    this.o1u_1 = Companion_getInstance_0().s1r_1;
    this.p1u_1 = Companion_getInstance_0().y1r_1;
    this.q1u_1 = '\x04\x01\n4\x02\x00\x07\x00\x02\x01\x07\x01\x02\x02\x07\x02\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x03\x00\f\b\x00\x01\x00\x01\x00\x01\x00\x05\x00\x11\b\x00\n\x00\f\x00\x14\t\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x05\x01\x1B\b\x01\n\x01\f\x01\x1E\t\x01\x03\x01 \b\x01\x01\x01\x01\x01\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x05\x02+\b\x02\n\x02\f\x02.\t\x02\x03\x020\b\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x03\x00\x02\x04\x00\x008\x00\x0B\x01\x00\x00\x00\x02\x15\x01\x00\x00\x00\x04#\x01\x00\x00\x00\x06\x07\x06\x00\uFFFF\uFFFF\x00\x07\f\x03\x02\x01\x00\b\f\x03\x04\x02\x00\t\f\x05\b\x00\x00\n\f\x05\x06\x00\x00\x0B\x06\x01\x00\x00\x00\x0B\b\x01\x00\x00\x00\x0B\t\x01\x00\x00\x00\x0B\n\x01\x00\x00\x00\f\x12\x01\x00\x00\x00\r\x0E\n\x05\x00\x00\x0E\x0F\x05\x01\x00\x00\x0F\x11\x03\x00\x00\x06\x10\r\x01\x00\x00\x00\x11\x14\x01\x00\x00\x00\x12\x10\x01\x00\x00\x00\x12\x13\x01\x00\x00\x00\x13\x01\x01\x00\x00\x00\x14\x12\x01\x00\x00\x00\x15\x16\x05\b\x00\x00\x16\x1F\x05\x02\x00\x00\x17\x1C\x03\x00\x00\x00\x18\x19\x05\x03\x00\x00\x19\x1B\x03\x00\x00\x00\x1A\x18\x01\x00\x00\x00\x1B\x1E\x01\x00\x00\x00\x1C\x1A\x01\x00\x00\x00\x1C\x1D\x01\x00\x00\x00\x1D \x01\x00\x00\x00\x1E\x1C\x01\x00\x00\x00\x1F\x17\x01\x00\x00\x00\x1F \x01\x00\x00\x00 !\x01\x00\x00\x00!"\x05\x04\x00\x00"\x03\x01\x00\x00\x00#$\x05\b\x00\x00$%\x05\x05\x00\x00%&\x05\b\x00\x00&/\x05\x02\x00\x00\',\x03\x00\x00\x00()\x05\x03\x00\x00)+\x03\x00\x00\x00*(\x01\x00\x00\x00+.\x01\x00\x00\x00,*\x01\x00\x00\x00,-\x01\x00\x00\x00-0\x01\x00\x00\x00.,\x01\x00\x00\x00/\'\x01\x00\x00\x00/0\x01\x00\x00\x0001\x01\x00\x00\x0012\x05\x04\x00\x002\x05\x01\x00\x00\x00\x06\x0B\x12\x1C\x1F,/';
  }
  protoOf(ExpressionParser).pk = function () {
    return this.k1u_1;
  };
  protoOf(ExpressionParser).uo = function () {
    return this.m1u_1;
  };
  protoOf(ExpressionParser).ol = function () {
    return this.n1u_1;
  };
  protoOf(ExpressionParser).qk = function () {
    return this.o1u_1;
  };
  protoOf(ExpressionParser).di = function () {
    return this.p1u_1;
  };
  protoOf(ExpressionParser).n1v = function () {
    return expression(this, 0);
  };
  protoOf(ExpressionParser).r1u = function () {
    var _localctx = MacroCallContext_init_$Create$(this.kj_1, this.ci_1);
    var _token;
    var _ctx;
    this.sr(_localctx, 2, 1);
    var _la;
    try {
      this.ur(_localctx, 1);
      this.ci_1 = 21;
      this.uq(8);
      this.ci_1 = 22;
      this.uq(2);
      this.ci_1 = 31;
      this.hj_1.ck(this);
      _la = this.ij_1.ig(1);
      if (_la === 6 || _la === 8) {
        this.ci_1 = 23;
        expression(this, 0);
        this.ci_1 = 28;
        this.hj_1.ck(this);
        _la = this.ij_1.ig(1);
        while (_la === 3) {
          this.ci_1 = 24;
          this.uq(3);
          this.ci_1 = 25;
          expression(this, 0);
          this.ci_1 = 30;
          this.hj_1.ck(this);
          _la = this.ij_1.ig(1);
        }
      }
      this.ci_1 = 33;
      this.uq(4);
    } catch ($p) {
      if ($p instanceof RecognitionException) {
        var re = $p;
        _localctx.er_1 = re;
        this.hj_1.yi(this, re);
        this.hj_1.uj(this, re);
      } else {
        throw $p;
      }
    }
    finally {
      this.tr();
    }
    return _localctx;
  };
  protoOf(ExpressionParser).s1u = function () {
    var _localctx = DotCallContext_init_$Create$(this.kj_1, this.ci_1);
    var _token;
    var _ctx;
    this.sr(_localctx, 4, 2);
    var _la;
    try {
      this.ur(_localctx, 1);
      this.ci_1 = 35;
      this.uq(8);
      this.ci_1 = 36;
      this.uq(5);
      this.ci_1 = 37;
      this.uq(8);
      this.ci_1 = 38;
      this.uq(2);
      this.ci_1 = 47;
      this.hj_1.ck(this);
      _la = this.ij_1.ig(1);
      if (_la === 6 || _la === 8) {
        this.ci_1 = 39;
        expression(this, 0);
        this.ci_1 = 44;
        this.hj_1.ck(this);
        _la = this.ij_1.ig(1);
        while (_la === 3) {
          this.ci_1 = 40;
          this.uq(3);
          this.ci_1 = 41;
          expression(this, 0);
          this.ci_1 = 46;
          this.hj_1.ck(this);
          _la = this.ij_1.ig(1);
        }
      }
      this.ci_1 = 49;
      this.uq(4);
    } catch ($p) {
      if ($p instanceof RecognitionException) {
        var re = $p;
        _localctx.er_1 = re;
        this.hj_1.yi(this, re);
        this.hj_1.uj(this, re);
      } else {
        throw $p;
      }
    }
    finally {
      this.tr();
    }
    return _localctx;
  };
  protoOf(ExpressionParser).tp = function (_localctx, ruleIndex, predIndex) {
    if (ruleIndex === 0) {
      return expression_sempred(this, (_localctx == null ? true : _localctx instanceof ExpressionContext) ? _localctx : THROW_CCE(), predIndex);
    }
    return true;
  };
  function ExpressionVisitor() {
  }
  function debug(yaml) {
    return Default_getInstance().y1j(yaml);
  }
  function parseExpression(expression) {
    var stream = CharStreams_getInstance().qf(expression);
    var lexemes = new ExpressionLexer(stream);
    var tokens = new CommonTokenStream(lexemes);
    var parser = new ExpressionParser(tokens);
    (new LoggingExpressionVisitor()).j1e(parser.n1v());
  }
  function main() {
    println("You just used 'require' to load the `testo` module!");
  }
  function mainWrapper() {
    main();
  }
  function LoggingExpressionVisitor() {
    ExpressionBaseVisitor.call(this);
  }
  protoOf(LoggingExpressionVisitor).o1v = function () {
  };
  protoOf(LoggingExpressionVisitor).k1e = function () {
    this.o1v();
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).p1v = function (ctx) {
    println('Visiting call ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).e1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).e1p = function (ctx) {
    this.p1v(ctx);
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).q1v = function (ctx) {
    println('Visiting module call ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).f1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).f1p = function (ctx) {
    this.q1v(ctx);
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).r1v = function (ctx) {
    println('Visiting variable ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).g1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).g1p = function (ctx) {
    this.r1v(ctx);
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).s1v = function (ctx) {
    println('Visiting plus expression ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).h1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).h1p = function (ctx) {
    this.s1v(ctx);
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).t1v = function (ctx) {
    println('Visiting literal ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).i1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).i1p = function (ctx) {
    this.t1v(ctx);
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).u1v = function (ctx) {
    println('Visiting macro call ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).j1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).j1p = function (ctx) {
    this.u1v(ctx);
    return Unit_instance;
  };
  protoOf(LoggingExpressionVisitor).v1v = function (ctx) {
    println('Visiting dot call ' + ctx.xg());
    protoOf(ExpressionBaseVisitor).k1p.call(this, ctx);
  };
  protoOf(LoggingExpressionVisitor).k1p = function (ctx) {
    this.v1v(ctx);
    return Unit_instance;
  };
  //region block: exports
  function $jsExportAll$(_) {
    var $io = _.io || (_.io = {});
    var $io$github = $io.github || ($io.github = {});
    var $io$github$gciatto = $io$github.gciatto || ($io$github.gciatto = {});
    $io$github$gciatto.debug = debug;
    $io$github$gciatto.parseExpression = parseExpression;
  }
  $jsExportAll$(_);
  kotlin_kotlin.$jsExportAll$(_);
  //endregion
  mainWrapper();
  return _;
}));

//# sourceMappingURL=testo-example.js.map
