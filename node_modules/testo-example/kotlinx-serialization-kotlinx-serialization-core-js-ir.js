(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'kotlinx-serialization-kotlinx-serialization-core-js-ir'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'kotlinx-serialization-kotlinx-serialization-core-js-ir'.");
    }
    globalThis['kotlinx-serialization-kotlinx-serialization-core-js-ir'] = factory(typeof globalThis['kotlinx-serialization-kotlinx-serialization-core-js-ir'] === 'undefined' ? {} : globalThis['kotlinx-serialization-kotlinx-serialization-core-js-ir'], globalThis['kotlin-kotlin-stdlib']);
  }
}(function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var protoOf = kotlin_kotlin.$_$.i4;
  var initMetadataForInterface = kotlin_kotlin.$_$.y3;
  var IllegalArgumentException_init_$Init$ = kotlin_kotlin.$_$.p;
  var objectCreate = kotlin_kotlin.$_$.h4;
  var captureStack = kotlin_kotlin.$_$.m3;
  var IllegalArgumentException_init_$Init$_0 = kotlin_kotlin.$_$.s;
  var IllegalArgumentException = kotlin_kotlin.$_$.u5;
  var initMetadataForClass = kotlin_kotlin.$_$.w3;
  var VOID = kotlin_kotlin.$_$.c;
  var isBlank = kotlin_kotlin.$_$.b5;
  var toString = kotlin_kotlin.$_$.j4;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.r;
  var equals = kotlin_kotlin.$_$.r3;
  var toList = kotlin_kotlin.$_$.c3;
  var emptyList = kotlin_kotlin.$_$.n2;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.e;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.h;
  var toHashSet = kotlin_kotlin.$_$.b3;
  var copyToArray = kotlin_kotlin.$_$.m2;
  var toBooleanArray = kotlin_kotlin.$_$.a3;
  var withIndex = kotlin_kotlin.$_$.e3;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.e2;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.d;
  var to = kotlin_kotlin.$_$.e6;
  var Unit_instance = kotlin_kotlin.$_$.o1;
  var toMap = kotlin_kotlin.$_$.d3;
  var lazy = kotlin_kotlin.$_$.b6;
  var contentEquals = kotlin_kotlin.$_$.f2;
  var until = kotlin_kotlin.$_$.o4;
  var joinToString = kotlin_kotlin.$_$.t2;
  var KProperty1 = kotlin_kotlin.$_$.s4;
  var getPropertyCallableRef = kotlin_kotlin.$_$.t3;
  var initMetadataForObject = kotlin_kotlin.$_$.a4;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var ensureNotNull = kotlin_kotlin.$_$.a6;
  var getStringHashCode = kotlin_kotlin.$_$.u3;
  var toIntOrNull = kotlin_kotlin.$_$.n5;
  var hashCode = kotlin_kotlin.$_$.v3;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.u;
  var THROW_CCE = kotlin_kotlin.$_$.y5;
  var ArrayList = kotlin_kotlin.$_$.r1;
  var ArrayList_init_$Create$_1 = kotlin_kotlin.$_$.f;
  var KtList = kotlin_kotlin.$_$.u1;
  var isInterface = kotlin_kotlin.$_$.d4;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.j;
  var LinkedHashMap = kotlin_kotlin.$_$.t1;
  var LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.k;
  var KtMap = kotlin_kotlin.$_$.w1;
  var step = kotlin_kotlin.$_$.n4;
  var KtMutableMap = kotlin_kotlin.$_$.y1;
  var getValue = kotlin_kotlin.$_$.q2;
  var contentHashCode = kotlin_kotlin.$_$.h2;
  var KClass = kotlin_kotlin.$_$.p4;
  var emptyMap = kotlin_kotlin.$_$.o2;
  var HashMap_init_$Create$ = kotlin_kotlin.$_$.g;
  var toString_0 = kotlin_kotlin.$_$.d6;
  var asSequence = kotlin_kotlin.$_$.d2;
  var IllegalArgumentException_init_$Init$_1 = kotlin_kotlin.$_$.q;
  var get_indices = kotlin_kotlin.$_$.r2;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.w;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(KSerializer, 'KSerializer');
  initMetadataForClass(SerializationException, 'SerializationException', SerializationException_init_$Create$, IllegalArgumentException);
  initMetadataForClass(elementDescriptors$1);
  initMetadataForClass(elementDescriptors$$inlined$Iterable$1);
  initMetadataForClass(ClassSerialDescriptorBuilder, 'ClassSerialDescriptorBuilder');
  initMetadataForClass(SerialDescriptorImpl, 'SerialDescriptorImpl');
  initMetadataForClass(SerialKind, 'SerialKind');
  initMetadataForObject(CONTEXTUAL, 'CONTEXTUAL', VOID, SerialKind);
  initMetadataForClass(PrimitiveKind, 'PrimitiveKind', VOID, SerialKind);
  initMetadataForClass(StructureKind, 'StructureKind', VOID, SerialKind);
  initMetadataForObject(CLASS, 'CLASS', VOID, StructureKind);
  initMetadataForObject(LIST, 'LIST', VOID, StructureKind);
  initMetadataForObject(MAP, 'MAP', VOID, StructureKind);
  initMetadataForClass(PolymorphicKind, 'PolymorphicKind', VOID, SerialKind);
  function decodeSequentially() {
    return false;
  }
  function decodeCollectionSize(descriptor) {
    return -1;
  }
  function decodeSerializableElement$default(descriptor, index, deserializer, previousValue, $super) {
    previousValue = previousValue === VOID ? null : previousValue;
    return $super === VOID ? this.t1g(descriptor, index, deserializer, previousValue) : $super.t1g.call(this, descriptor, index, deserializer, previousValue);
  }
  initMetadataForInterface(CompositeDecoder, 'CompositeDecoder');
  initMetadataForClass(ListLikeDescriptor, 'ListLikeDescriptor');
  initMetadataForClass(ArrayListClassDesc, 'ArrayListClassDesc', VOID, ListLikeDescriptor);
  initMetadataForClass(MapLikeDescriptor, 'MapLikeDescriptor');
  initMetadataForClass(LinkedHashMapClassDesc, 'LinkedHashMapClassDesc', VOID, MapLikeDescriptor);
  initMetadataForClass(AbstractCollectionSerializer, 'AbstractCollectionSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(CollectionLikeSerializer, 'CollectionLikeSerializer', VOID, AbstractCollectionSerializer);
  initMetadataForClass(CollectionSerializer, 'CollectionSerializer', VOID, CollectionLikeSerializer);
  initMetadataForClass(ArrayListSerializer, 'ArrayListSerializer', VOID, CollectionSerializer);
  initMetadataForClass(MapLikeSerializer, 'MapLikeSerializer', VOID, AbstractCollectionSerializer);
  initMetadataForClass(LinkedHashMapSerializer, 'LinkedHashMapSerializer', VOID, MapLikeSerializer);
  initMetadataForClass(SerializersModule, 'SerializersModule');
  initMetadataForClass(SerialModuleImpl, 'SerialModuleImpl', VOID, SerializersModule);
  initMetadataForClass(ContextualProvider, 'ContextualProvider');
  initMetadataForClass(Argless, 'Argless', VOID, ContextualProvider);
  initMetadataForClass(WithTypeArguments, 'WithTypeArguments', VOID, ContextualProvider);
  function contextual(kClass, serializer) {
    return this.o1i(kClass, SerializersModuleCollector$contextual$lambda(serializer));
  }
  initMetadataForInterface(SerializersModuleCollector, 'SerializersModuleCollector');
  initMetadataForClass(overwriteWith$1, VOID, VOID, VOID, [SerializersModuleCollector]);
  initMetadataForClass(SerializersModuleBuilder, 'SerializersModuleBuilder', VOID, VOID, [SerializersModuleCollector]);
  initMetadataForClass(SerializerAlreadyRegisteredException, 'SerializerAlreadyRegisteredException', VOID, IllegalArgumentException);
  //endregion
  function KSerializer() {
  }
  function SerializationException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException_init_$Create$() {
    var tmp = SerializationException_init_$Init$(objectCreate(protoOf(SerializationException)));
    captureStack(tmp, SerializationException_init_$Create$);
    return tmp;
  }
  function SerializationException_init_$Init$_0(message, cause, $this) {
    IllegalArgumentException_init_$Init$_0(message, cause, $this);
    SerializationException.call($this);
    return $this;
  }
  function SerializationException() {
    captureStack(this, SerializationException);
  }
  function ListSerializer(elementSerializer) {
    return new ArrayListSerializer(elementSerializer);
  }
  function MapSerializer(keySerializer, valueSerializer) {
    return new LinkedHashMapSerializer(keySerializer, valueSerializer);
  }
  function get_elementDescriptors(_this__u8e3s4) {
    // Inline function 'kotlin.collections.Iterable' call
    return new elementDescriptors$$inlined$Iterable$1(_this__u8e3s4);
  }
  function elementDescriptors$1($this_elementDescriptors) {
    this.n1f_1 = $this_elementDescriptors;
    this.m1f_1 = $this_elementDescriptors.o1f();
  }
  protoOf(elementDescriptors$1).g = function () {
    return this.m1f_1 > 0;
  };
  protoOf(elementDescriptors$1).h = function () {
    var tmp = this.n1f_1.o1f();
    var tmp1 = this.m1f_1;
    this.m1f_1 = tmp1 - 1 | 0;
    return this.n1f_1.p1f(tmp - tmp1 | 0);
  };
  function elementDescriptors$$inlined$Iterable$1($this_elementDescriptors) {
    this.q1f_1 = $this_elementDescriptors;
  }
  protoOf(elementDescriptors$$inlined$Iterable$1).f = function () {
    // Inline function 'kotlinx.serialization.descriptors.<get-elementDescriptors>.<anonymous>' call
    return new elementDescriptors$1(this.q1f_1);
  };
  function buildSerialDescriptor(serialName, kind, typeParameters, builder) {
    var tmp;
    if (builder === VOID) {
      tmp = buildSerialDescriptor$lambda;
    } else {
      tmp = builder;
    }
    builder = tmp;
    // Inline function 'kotlin.text.isNotBlank' call
    // Inline function 'kotlin.require' call
    if (!!isBlank(serialName)) {
      // Inline function 'kotlinx.serialization.descriptors.buildSerialDescriptor.<anonymous>' call
      var message = 'Blank serial names are prohibited';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    if (!!equals(kind, CLASS_getInstance())) {
      // Inline function 'kotlinx.serialization.descriptors.buildSerialDescriptor.<anonymous>' call
      var message_0 = "For StructureKind.CLASS please use 'buildClassSerialDescriptor' instead";
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    var sdBuilder = new ClassSerialDescriptorBuilder(serialName);
    builder(sdBuilder);
    return new SerialDescriptorImpl(serialName, kind, sdBuilder.u1f_1.i(), toList(typeParameters), sdBuilder);
  }
  function ClassSerialDescriptorBuilder(serialName) {
    this.r1f_1 = serialName;
    this.s1f_1 = false;
    this.t1f_1 = emptyList();
    this.u1f_1 = ArrayList_init_$Create$();
    this.v1f_1 = HashSet_init_$Create$();
    this.w1f_1 = ArrayList_init_$Create$();
    this.x1f_1 = ArrayList_init_$Create$();
    this.y1f_1 = ArrayList_init_$Create$();
  }
  function _get__hashCode__tgwhef($this) {
    var tmp0 = $this.k1g_1;
    // Inline function 'kotlin.getValue' call
    _hashCode$factory();
    return tmp0.q1();
  }
  function SerialDescriptorImpl$_hashCode$delegate$lambda(this$0) {
    return function () {
      return hashCodeImpl(this$0, this$0.j1g_1);
    };
  }
  function SerialDescriptorImpl$toString$lambda(this$0) {
    return function (it) {
      return this$0.l1g(it) + ': ' + this$0.p1f(it).m1g();
    };
  }
  function SerialDescriptorImpl(serialName, kind, elementsCount, typeParameters, builder) {
    this.z1f_1 = serialName;
    this.a1g_1 = kind;
    this.b1g_1 = elementsCount;
    this.c1g_1 = builder.t1f_1;
    this.d1g_1 = toHashSet(builder.u1f_1);
    var tmp = this;
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_0 = builder.u1f_1;
    tmp.e1g_1 = copyToArray(this_0);
    this.f1g_1 = compactArray(builder.w1f_1);
    var tmp_0 = this;
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_1 = builder.x1f_1;
    tmp_0.g1g_1 = copyToArray(this_1);
    this.h1g_1 = toBooleanArray(builder.y1f_1);
    var tmp_1 = this;
    // Inline function 'kotlin.collections.map' call
    var this_2 = withIndex(this.e1g_1);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_2, 10));
    var _iterator__ex2g4s = this_2.f();
    while (_iterator__ex2g4s.g()) {
      var item = _iterator__ex2g4s.h();
      // Inline function 'kotlinx.serialization.descriptors.SerialDescriptorImpl.name2Index.<anonymous>' call
      var tmp$ret$2 = to(item.hb_1, item.gb_1);
      destination.j(tmp$ret$2);
    }
    tmp_1.i1g_1 = toMap(destination);
    this.j1g_1 = compactArray(typeParameters);
    var tmp_2 = this;
    tmp_2.k1g_1 = lazy(SerialDescriptorImpl$_hashCode$delegate$lambda(this));
  }
  protoOf(SerialDescriptorImpl).m1g = function () {
    return this.z1f_1;
  };
  protoOf(SerialDescriptorImpl).n1g = function () {
    return this.a1g_1;
  };
  protoOf(SerialDescriptorImpl).o1f = function () {
    return this.b1g_1;
  };
  protoOf(SerialDescriptorImpl).l1g = function (index) {
    return getChecked(this.e1g_1, index);
  };
  protoOf(SerialDescriptorImpl).o1g = function (name) {
    var tmp0_elvis_lhs = this.i1g_1.t1(name);
    return tmp0_elvis_lhs == null ? -3 : tmp0_elvis_lhs;
  };
  protoOf(SerialDescriptorImpl).p1f = function (index) {
    return getChecked(this.f1g_1, index);
  };
  protoOf(SerialDescriptorImpl).equals = function (other) {
    var tmp$ret$0;
    $l$block_5: {
      // Inline function 'kotlinx.serialization.internal.equalsImpl' call
      if (this === other) {
        tmp$ret$0 = true;
        break $l$block_5;
      }
      if (!(other instanceof SerialDescriptorImpl)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.m1g() === other.m1g())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      // Inline function 'kotlinx.serialization.descriptors.SerialDescriptorImpl.equals.<anonymous>' call
      if (!contentEquals(this.j1g_1, other.j1g_1)) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      if (!(this.o1f() === other.o1f())) {
        tmp$ret$0 = false;
        break $l$block_5;
      }
      var inductionVariable = 0;
      var last = this.o1f();
      if (inductionVariable < last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (!(this.p1f(index).m1g() === other.p1f(index).m1g())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
          if (!equals(this.p1f(index).n1g(), other.p1f(index).n1g())) {
            tmp$ret$0 = false;
            break $l$block_5;
          }
        }
         while (inductionVariable < last);
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(SerialDescriptorImpl).hashCode = function () {
    return _get__hashCode__tgwhef(this);
  };
  protoOf(SerialDescriptorImpl).toString = function () {
    var tmp = until(0, this.b1g_1);
    var tmp_0 = this.z1f_1 + '(';
    return joinToString(tmp, ', ', tmp_0, ')', VOID, VOID, SerialDescriptorImpl$toString$lambda(this));
  };
  function buildSerialDescriptor$lambda($this$null) {
    return Unit_instance;
  }
  function _hashCode$factory() {
    return getPropertyCallableRef('_hashCode', 1, KProperty1, function (receiver) {
      return _get__hashCode__tgwhef(receiver);
    }, null);
  }
  function CONTEXTUAL() {
    CONTEXTUAL_instance = this;
    SerialKind.call(this);
  }
  var CONTEXTUAL_instance;
  function CONTEXTUAL_getInstance() {
    if (CONTEXTUAL_instance == null)
      new CONTEXTUAL();
    return CONTEXTUAL_instance;
  }
  function SerialKind() {
  }
  protoOf(SerialKind).toString = function () {
    return ensureNotNull(getKClassFromExpression(this).g9());
  };
  protoOf(SerialKind).hashCode = function () {
    return getStringHashCode(this.toString());
  };
  function PrimitiveKind() {
  }
  function CLASS() {
    CLASS_instance = this;
    StructureKind.call(this);
  }
  var CLASS_instance;
  function CLASS_getInstance() {
    if (CLASS_instance == null)
      new CLASS();
    return CLASS_instance;
  }
  function LIST() {
    LIST_instance = this;
    StructureKind.call(this);
  }
  var LIST_instance;
  function LIST_getInstance() {
    if (LIST_instance == null)
      new LIST();
    return LIST_instance;
  }
  function MAP() {
    MAP_instance = this;
    StructureKind.call(this);
  }
  var MAP_instance;
  function MAP_getInstance() {
    if (MAP_instance == null)
      new MAP();
    return MAP_instance;
  }
  function StructureKind() {
    SerialKind.call(this);
  }
  function PolymorphicKind() {
  }
  function CompositeDecoder() {
  }
  function ArrayListClassDesc(elementDesc) {
    ListLikeDescriptor.call(this, elementDesc);
  }
  protoOf(ArrayListClassDesc).m1g = function () {
    return 'kotlin.collections.ArrayList';
  };
  function LinkedHashMapClassDesc(keyDesc, valueDesc) {
    MapLikeDescriptor.call(this, 'kotlin.collections.LinkedHashMap', keyDesc, valueDesc);
  }
  function ListLikeDescriptor(elementDescriptor) {
    this.x1g_1 = elementDescriptor;
    this.y1g_1 = 1;
  }
  protoOf(ListLikeDescriptor).n1g = function () {
    return LIST_getInstance();
  };
  protoOf(ListLikeDescriptor).o1f = function () {
    return this.y1g_1;
  };
  protoOf(ListLikeDescriptor).l1g = function (index) {
    return index.toString();
  };
  protoOf(ListLikeDescriptor).o1g = function (name) {
    var tmp0_elvis_lhs = toIntOrNull(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalArgumentException_init_$Create$(name + ' is not a valid list index');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(ListLikeDescriptor).p1f = function (index) {
    // Inline function 'kotlin.require' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.ListLikeDescriptor.getElementDescriptor.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.m1g() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return this.x1g_1;
  };
  protoOf(ListLikeDescriptor).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof ListLikeDescriptor))
      return false;
    if (equals(this.x1g_1, other.x1g_1) && this.m1g() === other.m1g())
      return true;
    return false;
  };
  protoOf(ListLikeDescriptor).hashCode = function () {
    return imul(hashCode(this.x1g_1), 31) + getStringHashCode(this.m1g()) | 0;
  };
  protoOf(ListLikeDescriptor).toString = function () {
    return this.m1g() + '(' + toString(this.x1g_1) + ')';
  };
  function MapLikeDescriptor(serialName, keyDescriptor, valueDescriptor) {
    this.z1g_1 = serialName;
    this.a1h_1 = keyDescriptor;
    this.b1h_1 = valueDescriptor;
    this.c1h_1 = 2;
  }
  protoOf(MapLikeDescriptor).m1g = function () {
    return this.z1g_1;
  };
  protoOf(MapLikeDescriptor).n1g = function () {
    return MAP_getInstance();
  };
  protoOf(MapLikeDescriptor).o1f = function () {
    return this.c1h_1;
  };
  protoOf(MapLikeDescriptor).l1g = function (index) {
    return index.toString();
  };
  protoOf(MapLikeDescriptor).o1g = function (name) {
    var tmp0_elvis_lhs = toIntOrNull(name);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalArgumentException_init_$Create$(name + ' is not a valid map index');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(MapLikeDescriptor).p1f = function (index) {
    // Inline function 'kotlin.require' call
    if (!(index >= 0)) {
      // Inline function 'kotlinx.serialization.internal.MapLikeDescriptor.getElementDescriptor.<anonymous>' call
      var message = 'Illegal index ' + index + ', ' + this.m1g() + ' expects only non-negative indices';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var tmp;
    switch (index % 2 | 0) {
      case 0:
        tmp = this.a1h_1;
        break;
      case 1:
        tmp = this.b1h_1;
        break;
      default:
        var message_0 = 'Unreached';
        throw IllegalStateException_init_$Create$(toString(message_0));
    }
    return tmp;
  };
  protoOf(MapLikeDescriptor).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MapLikeDescriptor))
      return false;
    if (!(this.m1g() === other.m1g()))
      return false;
    if (!equals(this.a1h_1, other.a1h_1))
      return false;
    if (!equals(this.b1h_1, other.b1h_1))
      return false;
    return true;
  };
  protoOf(MapLikeDescriptor).hashCode = function () {
    var result = getStringHashCode(this.m1g());
    result = imul(31, result) + hashCode(this.a1h_1) | 0;
    result = imul(31, result) + hashCode(this.b1h_1) | 0;
    return result;
  };
  protoOf(MapLikeDescriptor).toString = function () {
    return this.m1g() + '(' + toString(this.a1h_1) + ', ' + toString(this.b1h_1) + ')';
  };
  function ArrayListSerializer(element) {
    CollectionSerializer.call(this, element);
    this.e1h_1 = new ArrayListClassDesc(element.k1f());
  }
  protoOf(ArrayListSerializer).k1f = function () {
    return this.e1h_1;
  };
  protoOf(ArrayListSerializer).f1h = function () {
    // Inline function 'kotlin.collections.arrayListOf' call
    return ArrayList_init_$Create$();
  };
  protoOf(ArrayListSerializer).g1h = function (_this__u8e3s4) {
    return _this__u8e3s4.i();
  };
  protoOf(ArrayListSerializer).h1h = function (_this__u8e3s4) {
    return this.g1h(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ArrayListSerializer).i1h = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(ArrayListSerializer).j1h = function (_this__u8e3s4) {
    return this.i1h(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ArrayListSerializer).k1h = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? ArrayList_init_$Create$_1(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(ArrayListSerializer).l1h = function (_this__u8e3s4) {
    return this.k1h((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtList) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(ArrayListSerializer).m1h = function (_this__u8e3s4, size) {
    return _this__u8e3s4.x4(size);
  };
  protoOf(ArrayListSerializer).n1h = function (_this__u8e3s4, size) {
    return this.m1h(_this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE(), size);
  };
  protoOf(ArrayListSerializer).o1h = function (_this__u8e3s4, index, element) {
    _this__u8e3s4.y3(index, element);
  };
  protoOf(ArrayListSerializer).p1h = function (_this__u8e3s4, index, element) {
    var tmp = _this__u8e3s4 instanceof ArrayList ? _this__u8e3s4 : THROW_CCE();
    return this.o1h(tmp, index, (element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  function LinkedHashMapSerializer(kSerializer, vSerializer) {
    MapLikeSerializer.call(this, kSerializer, vSerializer);
    this.x1h_1 = new LinkedHashMapClassDesc(kSerializer.k1f(), vSerializer.k1f());
  }
  protoOf(LinkedHashMapSerializer).k1f = function () {
    return this.x1h_1;
  };
  protoOf(LinkedHashMapSerializer).f1h = function () {
    return LinkedHashMap_init_$Create$();
  };
  protoOf(LinkedHashMapSerializer).y1h = function (_this__u8e3s4) {
    return imul(_this__u8e3s4.i(), 2);
  };
  protoOf(LinkedHashMapSerializer).h1h = function (_this__u8e3s4) {
    return this.y1h(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).z1h = function (_this__u8e3s4) {
    return _this__u8e3s4;
  };
  protoOf(LinkedHashMapSerializer).j1h = function (_this__u8e3s4) {
    return this.z1h(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).a1i = function (_this__u8e3s4) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : null;
    return tmp0_elvis_lhs == null ? LinkedHashMap_init_$Create$_0(_this__u8e3s4) : tmp0_elvis_lhs;
  };
  protoOf(LinkedHashMapSerializer).l1h = function (_this__u8e3s4) {
    return this.a1i((!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, KtMap) : false) ? _this__u8e3s4 : THROW_CCE());
  };
  protoOf(LinkedHashMapSerializer).b1i = function (_this__u8e3s4, size) {
  };
  protoOf(LinkedHashMapSerializer).n1h = function (_this__u8e3s4, size) {
    return this.b1i(_this__u8e3s4 instanceof LinkedHashMap ? _this__u8e3s4 : THROW_CCE(), size);
  };
  function CollectionSerializer(element) {
    CollectionLikeSerializer.call(this, element);
  }
  function MapLikeSerializer(keySerializer, valueSerializer) {
    AbstractCollectionSerializer.call(this);
    this.c1i_1 = keySerializer;
    this.d1i_1 = valueSerializer;
  }
  protoOf(MapLikeSerializer).e1i = function (decoder, builder, startIndex, size) {
    // Inline function 'kotlin.require' call
    if (!(size >= 0)) {
      // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.readAll.<anonymous>' call
      var message = 'Size must be known in advance when using READ_ALL';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var progression = step(until(0, imul(size, 2)), 2);
    var inductionVariable = progression.n_1;
    var last = progression.o_1;
    var step_0 = progression.p_1;
    if (step_0 > 0 && inductionVariable <= last || (step_0 < 0 && last <= inductionVariable))
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + step_0 | 0;
        this.f1i(decoder, startIndex + index | 0, builder, false);
      }
       while (!(index === last));
  };
  protoOf(MapLikeSerializer).r1h = function (decoder, builder, startIndex, size) {
    return this.e1i(decoder, (!(builder == null) ? isInterface(builder, KtMutableMap) : false) ? builder : THROW_CCE(), startIndex, size);
  };
  protoOf(MapLikeSerializer).f1i = function (decoder, index, builder, checkIndex) {
    var key = decoder.u1g(this.k1f(), index, this.c1i_1);
    var tmp;
    if (checkIndex) {
      // Inline function 'kotlin.also' call
      var this_0 = decoder.r1g(this.k1f());
      // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.readElement.<anonymous>' call
      // Inline function 'kotlin.require' call
      if (!(this_0 === (index + 1 | 0))) {
        // Inline function 'kotlinx.serialization.internal.MapLikeSerializer.readElement.<anonymous>.<anonymous>' call
        var message = 'Value must follow key in a map, index for key: ' + index + ', returned index for value: ' + this_0;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      tmp = this_0;
    } else {
      tmp = index + 1 | 0;
    }
    var vIndex = tmp;
    var tmp_0;
    var tmp_1;
    if (builder.r1(key)) {
      var tmp_2 = this.d1i_1.k1f().n1g();
      tmp_1 = !(tmp_2 instanceof PrimitiveKind);
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = decoder.t1g(this.k1f(), vIndex, this.d1i_1, getValue(builder, key));
    } else {
      tmp_0 = decoder.u1g(this.k1f(), vIndex, this.d1i_1);
    }
    var value = tmp_0;
    // Inline function 'kotlin.collections.set' call
    builder.w1(key, value);
  };
  protoOf(MapLikeSerializer).s1h = function (decoder, index, builder, checkIndex) {
    return this.f1i(decoder, index, (!(builder == null) ? isInterface(builder, KtMutableMap) : false) ? builder : THROW_CCE(), checkIndex);
  };
  function CollectionLikeSerializer(elementSerializer) {
    AbstractCollectionSerializer.call(this);
    this.q1h_1 = elementSerializer;
  }
  protoOf(CollectionLikeSerializer).r1h = function (decoder, builder, startIndex, size) {
    // Inline function 'kotlin.require' call
    if (!(size >= 0)) {
      // Inline function 'kotlinx.serialization.internal.CollectionLikeSerializer.readAll.<anonymous>' call
      var message = 'Size must be known in advance when using READ_ALL';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        this.s1h(decoder, startIndex + index | 0, builder, false);
      }
       while (inductionVariable < size);
  };
  protoOf(CollectionLikeSerializer).s1h = function (decoder, index, builder, checkIndex) {
    this.p1h(builder, index, decoder.u1g(this.k1f(), index, this.q1h_1));
  };
  function readSize($this, decoder, builder) {
    var size = decoder.s1g($this.k1f());
    $this.n1h(builder, size);
    return size;
  }
  function AbstractCollectionSerializer() {
  }
  protoOf(AbstractCollectionSerializer).u1h = function (decoder, previous) {
    var tmp1_elvis_lhs = previous == null ? null : this.l1h(previous);
    var builder = tmp1_elvis_lhs == null ? this.f1h() : tmp1_elvis_lhs;
    var startIndex = this.h1h(builder);
    var compositeDecoder = decoder.g1i(this.k1f());
    if (compositeDecoder.q1g()) {
      this.r1h(compositeDecoder, builder, startIndex, readSize(this, compositeDecoder, builder));
    } else {
      $l$loop: while (true) {
        var index = compositeDecoder.r1g(this.k1f());
        if (index === -1)
          break $l$loop;
        this.t1h(compositeDecoder, startIndex + index | 0, builder);
      }
    }
    compositeDecoder.p1g(this.k1f());
    return this.j1h(builder);
  };
  protoOf(AbstractCollectionSerializer).l1f = function (decoder) {
    return this.u1h(decoder, null);
  };
  protoOf(AbstractCollectionSerializer).t1h = function (decoder, index, builder, checkIndex, $super) {
    checkIndex = checkIndex === VOID ? true : checkIndex;
    var tmp;
    if ($super === VOID) {
      this.s1h(decoder, index, builder, checkIndex);
      tmp = Unit_instance;
    } else {
      tmp = $super.s1h.call(this, decoder, index, builder, checkIndex);
    }
    return tmp;
  };
  function get_EMPTY_DESCRIPTOR_ARRAY() {
    _init_properties_Platform_common_kt__3qzecs();
    return EMPTY_DESCRIPTOR_ARRAY;
  }
  var EMPTY_DESCRIPTOR_ARRAY;
  function compactArray(_this__u8e3s4) {
    _init_properties_Platform_common_kt__3qzecs();
    // Inline function 'kotlin.takeUnless' call
    var tmp;
    // Inline function 'kotlinx.serialization.internal.compactArray.<anonymous>' call
    // Inline function 'kotlin.collections.isNullOrEmpty' call
    if (!(_this__u8e3s4 == null || _this__u8e3s4.r())) {
      tmp = _this__u8e3s4;
    } else {
      tmp = null;
    }
    var tmp0_safe_receiver = tmp;
    var tmp_0;
    if (tmp0_safe_receiver == null) {
      tmp_0 = null;
    } else {
      // Inline function 'kotlin.collections.toTypedArray' call
      tmp_0 = copyToArray(tmp0_safe_receiver);
    }
    var tmp1_elvis_lhs = tmp_0;
    return tmp1_elvis_lhs == null ? get_EMPTY_DESCRIPTOR_ARRAY() : tmp1_elvis_lhs;
  }
  var properties_initialized_Platform_common_kt_i7q4ty;
  function _init_properties_Platform_common_kt__3qzecs() {
    if (!properties_initialized_Platform_common_kt_i7q4ty) {
      properties_initialized_Platform_common_kt_i7q4ty = true;
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      EMPTY_DESCRIPTOR_ARRAY = [];
    }
  }
  function hashCodeImpl(_this__u8e3s4, typeParams) {
    var result = getStringHashCode(_this__u8e3s4.m1g());
    result = imul(31, result) + contentHashCode(typeParams) | 0;
    var elementDescriptors = get_elementDescriptors(_this__u8e3s4);
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator = 1;
    var _iterator__ex2g4s = elementDescriptors.f();
    while (_iterator__ex2g4s.g()) {
      var element = _iterator__ex2g4s.h();
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var hash = accumulator;
      var tmp = imul(31, hash);
      // Inline function 'kotlinx.serialization.internal.hashCodeImpl.<anonymous>' call
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver = element.m1g();
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
      accumulator = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    }
    var namesHash = accumulator;
    // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator_0 = 1;
    var _iterator__ex2g4s_0 = elementDescriptors.f();
    while (_iterator__ex2g4s_0.g()) {
      var element_0 = _iterator__ex2g4s_0.h();
      // Inline function 'kotlinx.serialization.internal.elementsHashCodeBy.<anonymous>' call
      var hash_0 = accumulator_0;
      var tmp_0 = imul(31, hash_0);
      // Inline function 'kotlinx.serialization.internal.hashCodeImpl.<anonymous>' call
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver_0 = element_0.n1g();
      var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
      accumulator_0 = tmp_0 + (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0) | 0;
    }
    var kindHash = accumulator_0;
    result = imul(31, result) + namesHash | 0;
    result = imul(31, result) + kindHash | 0;
    return result;
  }
  var EmptySerializersModule;
  function SerializersModule() {
  }
  function SerialModuleImpl(class2ContextualFactory, polyBase2Serializers, polyBase2DefaultSerializerProvider, polyBase2NamedSerializers, polyBase2DefaultDeserializerProvider) {
    SerializersModule.call(this);
    this.i1i_1 = class2ContextualFactory;
    this.j1i_1 = polyBase2Serializers;
    this.k1i_1 = polyBase2DefaultSerializerProvider;
    this.l1i_1 = polyBase2NamedSerializers;
    this.m1i_1 = polyBase2DefaultDeserializerProvider;
  }
  protoOf(SerialModuleImpl).h1i = function (collector) {
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = this.i1i_1.l().f();
    while (_iterator__ex2g4s.g()) {
      var element = _iterator__ex2g4s.h();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var kclass = element.p1();
      // Inline function 'kotlin.collections.component2' call
      var serial = element.q1();
      if (serial instanceof Argless) {
        var tmp = isInterface(kclass, KClass) ? kclass : THROW_CCE();
        var tmp_0 = serial.p1i_1;
        collector.q1i(tmp, isInterface(tmp_0, KSerializer) ? tmp_0 : THROW_CCE());
      } else {
        if (serial instanceof WithTypeArguments) {
          collector.o1i(kclass, serial.n1i_1);
        }
      }
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_0 = this.j1i_1.l().f();
    while (_iterator__ex2g4s_0.g()) {
      var element_0 = _iterator__ex2g4s_0.h();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var baseClass = element_0.p1();
      // Inline function 'kotlin.collections.component2' call
      var classMap = element_0.q1();
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s_1 = classMap.l().f();
      while (_iterator__ex2g4s_1.g()) {
        var element_1 = _iterator__ex2g4s_1.h();
        // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var actualClass = element_1.p1();
        // Inline function 'kotlin.collections.component2' call
        var serializer = element_1.q1();
        var tmp_1 = isInterface(baseClass, KClass) ? baseClass : THROW_CCE();
        var tmp_2 = isInterface(actualClass, KClass) ? actualClass : THROW_CCE();
        // Inline function 'kotlinx.serialization.internal.cast' call
        var tmp$ret$9 = isInterface(serializer, KSerializer) ? serializer : THROW_CCE();
        collector.r1i(tmp_1, tmp_2, tmp$ret$9);
      }
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_2 = this.k1i_1.l().f();
    while (_iterator__ex2g4s_2.g()) {
      var element_2 = _iterator__ex2g4s_2.h();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var baseClass_0 = element_2.p1();
      // Inline function 'kotlin.collections.component2' call
      var provider = element_2.q1();
      var tmp_3 = isInterface(baseClass_0, KClass) ? baseClass_0 : THROW_CCE();
      collector.s1i(tmp_3, typeof provider === 'function' ? provider : THROW_CCE());
    }
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_3 = this.m1i_1.l().f();
    while (_iterator__ex2g4s_3.g()) {
      var element_3 = _iterator__ex2g4s_3.h();
      // Inline function 'kotlinx.serialization.modules.SerialModuleImpl.dumpTo.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var baseClass_1 = element_3.p1();
      // Inline function 'kotlin.collections.component2' call
      var provider_0 = element_3.q1();
      var tmp_4 = isInterface(baseClass_1, KClass) ? baseClass_1 : THROW_CCE();
      collector.t1i(tmp_4, typeof provider_0 === 'function' ? provider_0 : THROW_CCE());
    }
  };
  function Argless(serializer) {
    ContextualProvider.call(this);
    this.p1i_1 = serializer;
  }
  protoOf(Argless).equals = function (other) {
    var tmp;
    if (other instanceof Argless) {
      tmp = equals(other.p1i_1, this.p1i_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Argless).hashCode = function () {
    return hashCode(this.p1i_1);
  };
  function WithTypeArguments(provider) {
    ContextualProvider.call(this);
    this.n1i_1 = provider;
  }
  function ContextualProvider() {
  }
  function overwriteWith(_this__u8e3s4, other) {
    _init_properties_SerializersModule_kt__u78ha3();
    // Inline function 'kotlinx.serialization.modules.SerializersModule' call
    var builder = new SerializersModuleBuilder();
    // Inline function 'kotlinx.serialization.modules.overwriteWith.<anonymous>' call
    builder.z1i(_this__u8e3s4);
    other.h1i(new overwriteWith$1(builder));
    return builder.a1j();
  }
  function overwriteWith$1($this_SerializersModule) {
    this.b1j_1 = $this_SerializersModule;
  }
  protoOf(overwriteWith$1).q1i = function (kClass, serializer) {
    this.b1j_1.c1j(kClass, new Argless(serializer), true);
  };
  protoOf(overwriteWith$1).o1i = function (kClass, provider) {
    this.b1j_1.c1j(kClass, new WithTypeArguments(provider), true);
  };
  protoOf(overwriteWith$1).r1i = function (baseClass, actualClass, actualSerializer) {
    this.b1j_1.d1j(baseClass, actualClass, actualSerializer, true);
  };
  protoOf(overwriteWith$1).s1i = function (baseClass, defaultSerializerProvider) {
    this.b1j_1.e1j(baseClass, defaultSerializerProvider, true);
  };
  protoOf(overwriteWith$1).t1i = function (baseClass, defaultDeserializerProvider) {
    this.b1j_1.f1j(baseClass, defaultDeserializerProvider, true);
  };
  var properties_initialized_SerializersModule_kt_fjigjn;
  function _init_properties_SerializersModule_kt__u78ha3() {
    if (!properties_initialized_SerializersModule_kt_fjigjn) {
      properties_initialized_SerializersModule_kt_fjigjn = true;
      EmptySerializersModule = new SerialModuleImpl(emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());
    }
  }
  function SerializersModuleBuilder() {
    var tmp = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp.u1i_1 = HashMap_init_$Create$();
    var tmp_0 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_0.v1i_1 = HashMap_init_$Create$();
    var tmp_1 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_1.w1i_1 = HashMap_init_$Create$();
    var tmp_2 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_2.x1i_1 = HashMap_init_$Create$();
    var tmp_3 = this;
    // Inline function 'kotlin.collections.hashMapOf' call
    tmp_3.y1i_1 = HashMap_init_$Create$();
  }
  protoOf(SerializersModuleBuilder).q1i = function (kClass, serializer) {
    return this.g1j(kClass, new Argless(serializer));
  };
  protoOf(SerializersModuleBuilder).o1i = function (kClass, provider) {
    return this.g1j(kClass, new WithTypeArguments(provider));
  };
  protoOf(SerializersModuleBuilder).r1i = function (baseClass, actualClass, actualSerializer) {
    this.h1j(baseClass, actualClass, actualSerializer);
  };
  protoOf(SerializersModuleBuilder).s1i = function (baseClass, defaultSerializerProvider) {
    this.e1j(baseClass, defaultSerializerProvider, false);
  };
  protoOf(SerializersModuleBuilder).t1i = function (baseClass, defaultDeserializerProvider) {
    this.f1j(baseClass, defaultDeserializerProvider, false);
  };
  protoOf(SerializersModuleBuilder).z1i = function (module_0) {
    module_0.h1i(this);
  };
  protoOf(SerializersModuleBuilder).c1j = function (forClass, provider, allowOverwrite) {
    if (!allowOverwrite) {
      var previous = this.u1i_1.t1(forClass);
      if (!(previous == null) && !equals(previous, provider)) {
        throw new SerializerAlreadyRegisteredException('Contextual serializer or serializer provider for ' + toString(forClass) + ' already registered in this module');
      }
    }
    // Inline function 'kotlin.collections.set' call
    this.u1i_1.w1(forClass, provider);
  };
  protoOf(SerializersModuleBuilder).g1j = function (forClass, provider, allowOverwrite, $super) {
    allowOverwrite = allowOverwrite === VOID ? false : allowOverwrite;
    var tmp;
    if ($super === VOID) {
      this.c1j(forClass, provider, allowOverwrite);
      tmp = Unit_instance;
    } else {
      tmp = $super.c1j.call(this, forClass, provider, allowOverwrite);
    }
    return tmp;
  };
  protoOf(SerializersModuleBuilder).e1j = function (baseClass, defaultSerializerProvider, allowOverwrite) {
    var previous = this.w1i_1.t1(baseClass);
    if (!(previous == null) && !equals(previous, defaultSerializerProvider) && !allowOverwrite) {
      throw IllegalArgumentException_init_$Create$('Default serializers provider for ' + toString(baseClass) + ' is already registered: ' + toString_0(previous));
    }
    // Inline function 'kotlin.collections.set' call
    this.w1i_1.w1(baseClass, defaultSerializerProvider);
  };
  protoOf(SerializersModuleBuilder).f1j = function (baseClass, defaultDeserializerProvider, allowOverwrite) {
    var previous = this.y1i_1.t1(baseClass);
    if (!(previous == null) && !equals(previous, defaultDeserializerProvider) && !allowOverwrite) {
      throw IllegalArgumentException_init_$Create$('Default deserializers provider for ' + toString(baseClass) + ' is already registered: ' + toString_0(previous));
    }
    // Inline function 'kotlin.collections.set' call
    this.y1i_1.w1(baseClass, defaultDeserializerProvider);
  };
  protoOf(SerializersModuleBuilder).d1j = function (baseClass, concreteClass, concreteSerializer, allowOverwrite) {
    var name = concreteSerializer.k1f().m1g();
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = this.v1i_1;
    var value = this_0.t1(baseClass);
    var tmp;
    if (value == null) {
      // Inline function 'kotlinx.serialization.modules.SerializersModuleBuilder.registerPolymorphicSerializer.stub_for_inlining' call
      // Inline function 'kotlin.collections.hashMapOf' call
      var answer = HashMap_init_$Create$();
      this_0.w1(baseClass, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    var baseClassSerializers = tmp;
    var previousSerializer = baseClassSerializers.t1(concreteClass);
    // Inline function 'kotlin.collections.getOrPut' call
    var this_1 = this.x1i_1;
    var value_0 = this_1.t1(baseClass);
    var tmp_0;
    if (value_0 == null) {
      // Inline function 'kotlinx.serialization.modules.SerializersModuleBuilder.registerPolymorphicSerializer.stub_for_inlining' call
      // Inline function 'kotlin.collections.hashMapOf' call
      var answer_0 = HashMap_init_$Create$();
      this_1.w1(baseClass, answer_0);
      tmp_0 = answer_0;
    } else {
      tmp_0 = value_0;
    }
    var names = tmp_0;
    if (allowOverwrite) {
      if (!(previousSerializer == null)) {
        names.x1(previousSerializer.k1f().m1g());
      }
      // Inline function 'kotlin.collections.set' call
      baseClassSerializers.w1(concreteClass, concreteSerializer);
      // Inline function 'kotlin.collections.set' call
      names.w1(name, concreteSerializer);
      return Unit_instance;
    }
    if (!(previousSerializer == null)) {
      if (!equals(previousSerializer, concreteSerializer)) {
        throw SerializerAlreadyRegisteredException_init_$Create$(baseClass, concreteClass);
      } else {
        names.x1(previousSerializer.k1f().m1g());
      }
    }
    var previousByName = names.t1(name);
    if (!(previousByName == null)) {
      // Inline function 'kotlin.sequences.find' call
      var tmp0 = asSequence(ensureNotNull(this.v1i_1.t1(baseClass)));
      var tmp$ret$7;
      $l$block: {
        // Inline function 'kotlin.sequences.firstOrNull' call
        var _iterator__ex2g4s = tmp0.f();
        while (_iterator__ex2g4s.g()) {
          var element = _iterator__ex2g4s.h();
          // Inline function 'kotlinx.serialization.modules.SerializersModuleBuilder.registerPolymorphicSerializer.<anonymous>' call
          if (element.q1() === previousByName) {
            tmp$ret$7 = element;
            break $l$block;
          }
        }
        tmp$ret$7 = null;
      }
      var conflictingClass = tmp$ret$7;
      throw IllegalArgumentException_init_$Create$("Multiple polymorphic serializers for base class '" + toString(baseClass) + "' " + ("have the same serial name '" + name + "': '" + toString(concreteClass) + "' and '" + toString_0(conflictingClass) + "'"));
    }
    // Inline function 'kotlin.collections.set' call
    baseClassSerializers.w1(concreteClass, concreteSerializer);
    // Inline function 'kotlin.collections.set' call
    names.w1(name, concreteSerializer);
  };
  protoOf(SerializersModuleBuilder).h1j = function (baseClass, concreteClass, concreteSerializer, allowOverwrite, $super) {
    allowOverwrite = allowOverwrite === VOID ? false : allowOverwrite;
    var tmp;
    if ($super === VOID) {
      this.d1j(baseClass, concreteClass, concreteSerializer, allowOverwrite);
      tmp = Unit_instance;
    } else {
      tmp = $super.d1j.call(this, baseClass, concreteClass, concreteSerializer, allowOverwrite);
    }
    return tmp;
  };
  protoOf(SerializersModuleBuilder).a1j = function () {
    return new SerialModuleImpl(this.u1i_1, this.v1i_1, this.w1i_1, this.x1i_1, this.y1i_1);
  };
  function SerializerAlreadyRegisteredException_init_$Init$(baseClass, concreteClass, $this) {
    SerializerAlreadyRegisteredException.call($this, 'Serializer for ' + toString(concreteClass) + ' already registered in the scope of ' + toString(baseClass));
    return $this;
  }
  function SerializerAlreadyRegisteredException_init_$Create$(baseClass, concreteClass) {
    var tmp = SerializerAlreadyRegisteredException_init_$Init$(baseClass, concreteClass, objectCreate(protoOf(SerializerAlreadyRegisteredException)));
    captureStack(tmp, SerializerAlreadyRegisteredException_init_$Create$);
    return tmp;
  }
  function SerializerAlreadyRegisteredException(msg) {
    IllegalArgumentException_init_$Init$_1(msg, this);
    captureStack(this, SerializerAlreadyRegisteredException);
  }
  function SerializersModuleCollector$contextual$lambda($serializer) {
    return function (it) {
      return $serializer;
    };
  }
  function SerializersModuleCollector() {
  }
  function getChecked(_this__u8e3s4, index) {
    if (!(0 <= index ? index <= (_this__u8e3s4.length - 1 | 0) : false))
      throw IndexOutOfBoundsException_init_$Create$('Index ' + index + ' out of bounds ' + get_indices(_this__u8e3s4).toString());
    return _this__u8e3s4[index];
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = decodeSerializableElement$default;
  _.$_$.b = SerializationException_init_$Init$_0;
  _.$_$.c = CONTEXTUAL_getInstance;
  _.$_$.d = CLASS_getInstance;
  _.$_$.e = LIST_getInstance;
  _.$_$.f = MAP_getInstance;
  _.$_$.g = ListSerializer;
  _.$_$.h = MapSerializer;
  _.$_$.i = PolymorphicKind;
  _.$_$.j = buildSerialDescriptor;
  _.$_$.k = decodeCollectionSize;
  _.$_$.l = decodeSequentially;
  _.$_$.m = CompositeDecoder;
  _.$_$.n = SerializersModuleBuilder;
  _.$_$.o = overwriteWith;
  _.$_$.p = KSerializer;
  _.$_$.q = SerializationException;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlinx-serialization-kotlinx-serialization-core-js-ir.js.map
