(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js', './kotlinx-serialization-kotlinx-serialization-core-js-ir.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'), require('./kotlinx-serialization-kotlinx-serialization-core-js-ir.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'yamlkt-root-yamlkt-js-ir'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'yamlkt-root-yamlkt-js-ir'.");
    }
    if (typeof globalThis['kotlinx-serialization-kotlinx-serialization-core-js-ir'] === 'undefined') {
      throw new Error("Error loading module 'yamlkt-root-yamlkt-js-ir'. Its dependency 'kotlinx-serialization-kotlinx-serialization-core-js-ir' was not found. Please, check whether 'kotlinx-serialization-kotlinx-serialization-core-js-ir' is loaded prior to 'yamlkt-root-yamlkt-js-ir'.");
    }
    globalThis['yamlkt-root-yamlkt-js-ir'] = factory(typeof globalThis['yamlkt-root-yamlkt-js-ir'] === 'undefined' ? {} : globalThis['yamlkt-root-yamlkt-js-ir'], globalThis['kotlin-kotlin-stdlib'], globalThis['kotlinx-serialization-kotlinx-serialization-core-js-ir']);
  }
}(function (_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core) {
  'use strict';
  //region block: imports
  var Unit_instance = kotlin_kotlin.$_$.o1;
  var VOID = kotlin_kotlin.$_$.c;
  var protoOf = kotlin_kotlin.$_$.i4;
  var initMetadataForObject = kotlin_kotlin.$_$.a4;
  var SerializersModuleBuilder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.n;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.m1;
  var overwriteWith = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.o;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.r;
  var KtMap = kotlin_kotlin.$_$.w1;
  var isInterface = kotlin_kotlin.$_$.d4;
  var THROW_CCE = kotlin_kotlin.$_$.y5;
  var initMetadataForClass = kotlin_kotlin.$_$.w3;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.i;
  var toString = kotlin_kotlin.$_$.j4;
  var Enum = kotlin_kotlin.$_$.s5;
  var SerializationException = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.q;
  var SerializationException_init_$Init$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.b;
  var captureStack = kotlin_kotlin.$_$.m3;
  var CONTEXTUAL_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c;
  var buildSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j;
  var ensureNotNull = kotlin_kotlin.$_$.a6;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.u;
  var KSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.p;
  var ListSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g;
  var MapSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.h;
  var charSequenceGet = kotlin_kotlin.$_$.o3;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.e1;
  var coerceAtLeast = kotlin_kotlin.$_$.k4;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.n;
  var charSequenceLength = kotlin_kotlin.$_$.p3;
  var get_indices = kotlin_kotlin.$_$.a5;
  var coerceIn = kotlin_kotlin.$_$.l4;
  var Pair = kotlin_kotlin.$_$.w5;
  var takeLast = kotlin_kotlin.$_$.h5;
  var take = kotlin_kotlin.$_$.i5;
  var Char = kotlin_kotlin.$_$.p5;
  var fillArrayVal = kotlin_kotlin.$_$.s3;
  var numberToLong = kotlin_kotlin.$_$.g4;
  var Long = kotlin_kotlin.$_$.v5;
  var toString_0 = kotlin_kotlin.$_$.i1;
  var Char__minus_impl_a2frrh = kotlin_kotlin.$_$.g1;
  var repeat = kotlin_kotlin.$_$.f5;
  var println = kotlin_kotlin.$_$.j3;
  var KMutableProperty0 = kotlin_kotlin.$_$.q4;
  var getPropertyCallableRef = kotlin_kotlin.$_$.t3;
  var KMutableProperty1 = kotlin_kotlin.$_$.r4;
  var toDoubleOrNull = kotlin_kotlin.$_$.l5;
  var contains = kotlin_kotlin.$_$.y4;
  var numberToInt = kotlin_kotlin.$_$.f4;
  var rangeTo = kotlin_kotlin.$_$.m4;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.h1;
  var isWhitespace = kotlin_kotlin.$_$.e5;
  var isCharSequence = kotlin_kotlin.$_$.c4;
  var trimEnd = kotlin_kotlin.$_$.o5;
  var numberToChar = kotlin_kotlin.$_$.e4;
  var charArray = kotlin_kotlin.$_$.n3;
  var initMetadataForCompanion = kotlin_kotlin.$_$.x3;
  var copyOf = kotlin_kotlin.$_$.j2;
  var concatToString = kotlin_kotlin.$_$.x4;
  var copyOf_0 = kotlin_kotlin.$_$.k2;
  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.x;
  var get_lastIndex = kotlin_kotlin.$_$.v2;
  var compareTo = kotlin_kotlin.$_$.q3;
  var Companion_instance = kotlin_kotlin.$_$.n1;
  var _Result___init__impl__xyqfz8 = kotlin_kotlin.$_$.j1;
  var createFailure = kotlin_kotlin.$_$.z5;
  var Result__exceptionOrNull_impl_p6xea9 = kotlin_kotlin.$_$.k1;
  var _Result___get_value__impl__bjfvqg = kotlin_kotlin.$_$.l1;
  var decodeSerializableElement$default = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a;
  var decodeSequentially = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.l;
  var decodeCollectionSize = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.k;
  var CompositeDecoder = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.m;
  var toString_1 = kotlin_kotlin.$_$.d6;
  var equals = kotlin_kotlin.$_$.r3;
  var Char__compareTo_impl_ypi4mb = kotlin_kotlin.$_$.f1;
  var CLASS_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.d;
  var PolymorphicKind = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.i;
  var MAP_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.f;
  var LIST_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.e;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(Yaml, 'Yaml');
  initMetadataForObject(Default, 'Default', VOID, Yaml);
  initMetadataForClass(YamlImpl, 'YamlImpl', VOID, Yaml);
  initMetadataForClass(YamlConfigurationInternal, 'YamlConfigurationInternal');
  initMetadataForClass(StringSerialization, 'StringSerialization', VOID, Enum);
  initMetadataForClass(NullSerialization, 'NullSerialization', VOID, Enum);
  initMetadataForClass(MapSerialization, 'MapSerialization', VOID, Enum);
  initMetadataForClass(ListSerialization, 'ListSerialization', VOID, Enum);
  initMetadataForClass(YamlBuilder, 'YamlBuilder');
  initMetadataForClass(YamlDecodingException, 'YamlDecodingException', VOID, SerializationException);
  initMetadataForObject(YamlDynamicSerializer, 'YamlDynamicSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(YamlNullableDynamicSerializer, 'YamlNullableDynamicSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(HexConverter, 'HexConverter');
  initMetadataForObject(Debugging, 'Debugging');
  initMetadataForObject(EscapeCharMappings, 'EscapeCharMappings');
  initMetadataForClass(InlineDecoder, 'InlineDecoder');
  initMetadataForCompanion(Companion);
  initMetadataForClass(Token, 'Token', VOID, Enum);
  initMetadataForClass(StringBufHolder, 'StringBufHolder', StringBufHolder);
  initMetadataForClass(TokenStream, 'TokenStream', VOID, StringBufHolder);
  initMetadataForClass(Stack, 'Stack', Stack);
  initMetadataForClass(Kind, 'Kind', VOID, Enum);
  initMetadataForClass(AbstractDecoder, 'AbstractDecoder', VOID, VOID, [CompositeDecoder]);
  initMetadataForClass(IndentedDecoder, 'IndentedDecoder', VOID, AbstractDecoder);
  initMetadataForClass(EmptyClassDecoder, 'EmptyClassDecoder', VOID, AbstractDecoder);
  initMetadataForClass(BlockClassDecoder, 'BlockClassDecoder', VOID, IndentedDecoder);
  initMetadataForClass(BlockMapDecoder, 'BlockMapDecoder', VOID, IndentedDecoder);
  initMetadataForClass(FlowMapDecoder, 'FlowMapDecoder', VOID, AbstractDecoder);
  initMetadataForClass(FlowClassDecoder, 'FlowClassDecoder', VOID, AbstractDecoder);
  initMetadataForClass(FlowSequenceDecoder, 'FlowSequenceDecoder', VOID, AbstractDecoder);
  initMetadataForClass(BlockSequenceDecoder, 'BlockSequenceDecoder', VOID, IndentedDecoder);
  initMetadataForClass(YamlStringDecoder, 'YamlStringDecoder', VOID, AbstractDecoder);
  initMetadataForClass(YamlNullStringDecoder, 'YamlNullStringDecoder', VOID, AbstractDecoder);
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(YamlDecoder, 'YamlDecoder');
  //endregion
  function Yaml$Default$nonStrict$lambda($this$Yaml) {
    $this$Yaml.k1j_1 = true;
    $this$Yaml.j1j_1 = true;
    return Unit_instance;
  }
  function Default() {
    Default_instance = this;
    Yaml.call(this, new YamlConfigurationInternal());
    var tmp = this;
    tmp.t1j_1 = Yaml_0(VOID, Yaml$Default$nonStrict$lambda);
  }
  var Default_instance;
  function Default_getInstance() {
    if (Default_instance == null)
      new Default();
    return Default_instance;
  }
  function Yaml(configuration, serializersModule) {
    Default_getInstance();
    var tmp;
    if (serializersModule === VOID) {
      // Inline function 'kotlinx.serialization.modules.SerializersModule' call
      var builder = new SerializersModuleBuilder();
      // Inline function 'net.mamoe.yamlkt.Yaml.<init>.<anonymous>' call
      builder.q1i(PrimitiveClasses_getInstance().q9(), YamlDynamicSerializer_getInstance());
      var tmp$ret$0 = builder.a1j();
      tmp = overwriteWith(tmp$ret$0, configuration.z1j_1);
    } else {
      tmp = serializersModule;
    }
    serializersModule = tmp;
    this.u1j_1 = configuration;
    this.v1j_1 = serializersModule;
  }
  protoOf(Yaml).w1j = function () {
    return this.v1j_1;
  };
  protoOf(Yaml).x1j = function (deserializer, string) {
    return deserializer.l1f(new YamlDecoder(this.u1j_1, new TokenStream(string), this.w1j()));
  };
  protoOf(Yaml).y1j = function (yamlContent) {
    var v = parseMapOrNullImpl(this, yamlContent);
    var tmp;
    if (v == null) {
      throw IllegalArgumentException_init_$Create$('Cannot cast `null` to Map<String, Any?>');
    } else {
      if (!(v == null) ? isInterface(v, KtMap) : false) {
        tmp = v;
      } else {
        // Inline function 'net.mamoe.yamlkt.internal.classSimpleName' call
        var tmp$ret$0 = getKClassFromExpression(v).g9();
        throw IllegalArgumentException_init_$Create$('Cannot cast ' + tmp$ret$0 + ' to Map<String, Any?>');
      }
    }
    var tmp_0 = tmp;
    return isInterface(tmp_0, KtMap) ? tmp_0 : THROW_CCE();
  };
  function Yaml_0(from, configuration) {
    from = from === VOID ? Default_getInstance() : from;
    var tmp;
    if (configuration === VOID) {
      tmp = Yaml$lambda;
    } else {
      tmp = configuration;
    }
    configuration = tmp;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = new YamlBuilder(from.u1j_1);
    configuration(this_0);
    return new YamlImpl(this_0.i1k());
  }
  function parseMapOrNullImpl(_this__u8e3s4, yamlContent) {
    var v = _this__u8e3s4.x1j(YamlNullableDynamicSerializer_getInstance(), yamlContent);
    var tmp;
    if (!(v == null) ? isInterface(v, KtMap) : false) {
      var result = LinkedHashMap_init_$Create$(v.i());
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s = v.l().f();
      while (_iterator__ex2g4s.g()) {
        var element = _iterator__ex2g4s.h();
        // Inline function 'net.mamoe.yamlkt.parseMapOrNullImpl.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var key = element.p1();
        // Inline function 'kotlin.collections.component2' call
        var value = element.q1();
        // Inline function 'kotlin.collections.set' call
        var key_0 = key == null ? null : toString(key);
        result.w1(key_0, value);
      }
      tmp = result;
    } else {
      tmp = v;
    }
    return tmp;
  }
  function YamlImpl(configuration) {
    Yaml.call(this, configuration);
  }
  function Yaml$lambda($this$null) {
    return Unit_instance;
  }
  function YamlConfigurationInternal(serializersModule, nonStrictNullability, nonStrictNumber, encodeDefaultValues, stringSerialization, nullSerialization, mapSerialization, classSerialization, listSerialization) {
    var tmp;
    if (serializersModule === VOID) {
      // Inline function 'kotlinx.serialization.modules.SerializersModule' call
      var builder = new SerializersModuleBuilder();
      // Inline function 'net.mamoe.yamlkt.YamlConfigurationInternal.<init>.<anonymous>' call
      tmp = builder.a1j();
    } else {
      tmp = serializersModule;
    }
    serializersModule = tmp;
    nonStrictNullability = nonStrictNullability === VOID ? false : nonStrictNullability;
    nonStrictNumber = nonStrictNumber === VOID ? false : nonStrictNumber;
    encodeDefaultValues = encodeDefaultValues === VOID ? true : encodeDefaultValues;
    stringSerialization = stringSerialization === VOID ? StringSerialization_NONE_getInstance() : stringSerialization;
    nullSerialization = nullSerialization === VOID ? NullSerialization_NULL_getInstance() : nullSerialization;
    mapSerialization = mapSerialization === VOID ? MapSerialization_BLOCK_MAP_getInstance() : mapSerialization;
    classSerialization = classSerialization === VOID ? MapSerialization_BLOCK_MAP_getInstance() : classSerialization;
    listSerialization = listSerialization === VOID ? ListSerialization_AUTO_getInstance() : listSerialization;
    this.z1j_1 = serializersModule;
    this.a1k_1 = nonStrictNullability;
    this.b1k_1 = nonStrictNumber;
    this.c1k_1 = encodeDefaultValues;
    this.d1k_1 = stringSerialization;
    this.e1k_1 = nullSerialization;
    this.f1k_1 = mapSerialization;
    this.g1k_1 = classSerialization;
    this.h1k_1 = listSerialization;
  }
  var StringSerialization_SINGLE_QUOTATION_instance;
  var StringSerialization_DOUBLE_QUOTATION_instance;
  var StringSerialization_NONE_instance;
  var StringSerialization_BEST_PERFORMANCE_instance;
  var StringSerialization_entriesInitialized;
  function StringSerialization_initEntries() {
    if (StringSerialization_entriesInitialized)
      return Unit_instance;
    StringSerialization_entriesInitialized = true;
    StringSerialization_SINGLE_QUOTATION_instance = new StringSerialization('SINGLE_QUOTATION', 0);
    StringSerialization_DOUBLE_QUOTATION_instance = new StringSerialization('DOUBLE_QUOTATION', 1);
    StringSerialization_NONE_instance = new StringSerialization('NONE', 2);
    StringSerialization_BEST_PERFORMANCE_instance = new StringSerialization('BEST_PERFORMANCE', 3);
  }
  var NullSerialization_TILDE_instance;
  var NullSerialization_NULL_instance;
  var NullSerialization_entriesInitialized;
  function NullSerialization_initEntries() {
    if (NullSerialization_entriesInitialized)
      return Unit_instance;
    NullSerialization_entriesInitialized = true;
    NullSerialization_TILDE_instance = new NullSerialization('TILDE', 0, '~');
    NullSerialization_NULL_instance = new NullSerialization('NULL', 1, 'null');
  }
  var MapSerialization_BLOCK_MAP_instance;
  var MapSerialization_FLOW_MAP_instance;
  var MapSerialization_entriesInitialized;
  function MapSerialization_initEntries() {
    if (MapSerialization_entriesInitialized)
      return Unit_instance;
    MapSerialization_entriesInitialized = true;
    MapSerialization_BLOCK_MAP_instance = new MapSerialization('BLOCK_MAP', 0);
    MapSerialization_FLOW_MAP_instance = new MapSerialization('FLOW_MAP', 1);
  }
  var ListSerialization_BLOCK_SEQUENCE_instance;
  var ListSerialization_FLOW_SEQUENCE_instance;
  var ListSerialization_AUTO_instance;
  var ListSerialization_entriesInitialized;
  function ListSerialization_initEntries() {
    if (ListSerialization_entriesInitialized)
      return Unit_instance;
    ListSerialization_entriesInitialized = true;
    ListSerialization_BLOCK_SEQUENCE_instance = new ListSerialization('BLOCK_SEQUENCE', 0);
    ListSerialization_FLOW_SEQUENCE_instance = new ListSerialization('FLOW_SEQUENCE', 1);
    ListSerialization_AUTO_instance = new ListSerialization('AUTO', 2);
  }
  function StringSerialization(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function NullSerialization(name, ordinal, value) {
    Enum.call(this, name, ordinal);
    this.l1k_1 = value;
  }
  function MapSerialization(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function ListSerialization(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function StringSerialization_NONE_getInstance() {
    StringSerialization_initEntries();
    return StringSerialization_NONE_instance;
  }
  function NullSerialization_NULL_getInstance() {
    NullSerialization_initEntries();
    return NullSerialization_NULL_instance;
  }
  function MapSerialization_BLOCK_MAP_getInstance() {
    MapSerialization_initEntries();
    return MapSerialization_BLOCK_MAP_instance;
  }
  function ListSerialization_AUTO_getInstance() {
    ListSerialization_initEntries();
    return ListSerialization_AUTO_instance;
  }
  function YamlBuilder(conf) {
    this.i1j_1 = conf.z1j_1;
    this.j1j_1 = conf.a1k_1;
    this.k1j_1 = conf.b1k_1;
    this.l1j_1 = conf.c1k_1;
    this.m1j_1 = conf.d1k_1;
    this.n1j_1 = conf.e1k_1;
    this.o1j_1 = conf.f1k_1;
    this.p1j_1 = conf.g1k_1;
    this.q1j_1 = conf.h1k_1;
  }
  protoOf(YamlBuilder).i1k = function () {
    return new YamlConfigurationInternal(this.i1j_1, this.j1j_1, this.k1j_1, this.l1j_1, this.m1j_1, this.n1j_1, this.o1j_1, this.p1j_1, this.q1j_1);
  };
  function YamlDecodingException(message, cause) {
    cause = cause === VOID ? null : cause;
    SerializationException_init_$Init$(message, cause, this);
    captureStack(this, YamlDecodingException);
  }
  function YamlDynamicSerializer() {
    YamlDynamicSerializer_instance = this;
    this.m1k_1 = buildSerialDescriptor('YamlDynamic', CONTEXTUAL_getInstance(), []);
  }
  protoOf(YamlDynamicSerializer).k1f = function () {
    return this.m1k_1;
  };
  protoOf(YamlDynamicSerializer).l1f = function (decoder) {
    // Inline function 'net.mamoe.yamlkt.YamlNullableDynamicSerializer.decode' call
    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call
    var descriptor = YamlNullableDynamicSerializer_getInstance().n1k_1;
    var composite = decoder.g1i(descriptor);
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'net.mamoe.yamlkt.YamlNullableDynamicSerializer.decode.<anonymous>' call
      var tmp;
      switch ((composite instanceof AbstractDecoder ? composite : THROW_CCE()).n1g().z1_1) {
        case 1:
        case 6:
          composite.r1k_1 = true;
          tmp = YamlNullableDynamicSerializer_getInstance().p1k_1.l1f(composite);
          break;
        case 2:
          composite.r1k_1 = true;
          tmp = YamlNullableDynamicSerializer_getInstance().o1k_1.l1f(composite);
          break;
        case 7:
          composite.r1k_1 = true;
          tmp = YamlNullableDynamicSerializer_getInstance().o1k_1.l1f(composite);
          break;
        case 3:
          tmp$ret$0 = adjustDynamicString(ensureNotNull(composite.m1l().g1l_1.z1k_1), composite.m1l().g1l_1.a1l_1);
          break $l$block_0;
        case 4:
          // Inline function 'net.mamoe.yamlkt.YamlDynamicSerializer.deserialize.<anonymous>' call

          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

          var hint = 'Unexpected null';
          var tmp0 = composite.m1l();
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

          var hint_0 = composite.q1k_1 + ': ' + hint;
          throw contextualDecodingException(tmp0.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
        default:
          var message = 'bad decoder returned: ' + toString(composite);
          throw IllegalStateException_init_$Create$(toString(message));
      }
      tmp$ret$0 = tmp;
    }
    var result = tmp$ret$0;
    composite.p1g(descriptor);
    return ensureNotNull(result);
  };
  var YamlDynamicSerializer_instance;
  function YamlDynamicSerializer_getInstance() {
    if (YamlDynamicSerializer_instance == null)
      new YamlDynamicSerializer();
    return YamlDynamicSerializer_instance;
  }
  function YamlNullableDynamicSerializer() {
    YamlNullableDynamicSerializer_instance = this;
    this.n1k_1 = buildSerialDescriptor('YamlNullableDynamic', CONTEXTUAL_getInstance(), []);
    this.o1k_1 = ListSerializer(this);
    this.p1k_1 = MapSerializer(this, this);
  }
  protoOf(YamlNullableDynamicSerializer).k1f = function () {
    return this.n1k_1;
  };
  protoOf(YamlNullableDynamicSerializer).l1f = function (decoder) {
    // Inline function 'net.mamoe.yamlkt.YamlNullableDynamicSerializer.decode' call
    // Inline function 'kotlinx.serialization.encoding.decodeStructure' call
    var descriptor = this.n1k_1;
    var composite = decoder.g1i(descriptor);
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'net.mamoe.yamlkt.YamlNullableDynamicSerializer.decode.<anonymous>' call
      var tmp;
      switch ((composite instanceof AbstractDecoder ? composite : THROW_CCE()).n1g().z1_1) {
        case 1:
        case 6:
          composite.r1k_1 = true;
          tmp = YamlNullableDynamicSerializer_getInstance().p1k_1.l1f(composite);
          break;
        case 2:
          composite.r1k_1 = true;
          tmp = YamlNullableDynamicSerializer_getInstance().o1k_1.l1f(composite);
          break;
        case 7:
          composite.r1k_1 = true;
          tmp = YamlNullableDynamicSerializer_getInstance().o1k_1.l1f(composite);
          break;
        case 3:
          tmp$ret$0 = adjustDynamicString(ensureNotNull(composite.m1l().g1l_1.z1k_1), composite.m1l().g1l_1.a1l_1);
          break $l$block_0;
        case 4:
          // Inline function 'net.mamoe.yamlkt.YamlNullableDynamicSerializer.decode.<anonymous>' call

          tmp$ret$0 = null;
          break $l$block_0;
        default:
          var message = 'bad decoder returned: ' + toString(composite);
          throw IllegalStateException_init_$Create$(toString(message));
      }
      tmp$ret$0 = tmp;
    }
    var result = tmp$ret$0;
    composite.p1g(descriptor);
    return result;
  };
  var YamlNullableDynamicSerializer_instance;
  function YamlNullableDynamicSerializer_getInstance() {
    if (YamlNullableDynamicSerializer_instance == null)
      new YamlNullableDynamicSerializer();
    return YamlNullableDynamicSerializer_instance;
  }
  function skipLine(_this__u8e3s4) {
    // Inline function 'net.mamoe.yamlkt.internal.whileNotEOF' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop;
      }
      var tmp1 = _this__u8e3s4.w1k_1;
      _this__u8e3s4.w1k_1 = tmp1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.skipLine.<anonymous>' call
      // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
      var this_0 = charSequenceGet(_this__u8e3s4.v1k_1, tmp1);
      if (this_0 === _Char___init__impl__6a9atx(10) || this_0 === _Char___init__impl__6a9atx(13))
        return Unit_instance;
    }
  }
  function contextualDecodingException(_this__u8e3s4, hint, descriptor, index, throwable) {
    throwable = throwable === VOID ? null : throwable;
    var tmp;
    if (descriptor == null) {
      tmp = hint;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException.<anonymous>' call
      tmp = hint + (" for '" + descriptor.l1g(index) + "' ") + ("in '" + descriptor.m1g() + "'");
    }
    var message = tmp;
    var v = get_lineNumberAndCurrentLine(_this__u8e3s4);
    var lineNumber = v.qb_1;
    var columnNumber = v.rb_1.length + 1 | 0;
    var before = limitLast(v.rb_1, 32);
    var last = limitFirst(readLine(_this__u8e3s4), 32);
    var tmp_0;
    if (!(get_lineNumberAndCurrentLine(_this__u8e3s4).qb_1 === lineNumber)) {
      tmp_0 = before;
    } else {
      tmp_0 = before + last;
    }
    var text = tmp_0;
    var position = 'at line ' + lineNumber + ', column ' + columnNumber;
    // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
    var cur = coerceAtLeast(before.length - 1 | 0, 0);
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException.<anonymous>' call
    this_0.p7(message);
    this_0.q7(_Char___init__impl__6a9atx(10));
    this_0.p7(text);
    this_0.q7(_Char___init__impl__6a9atx(10));
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < cur)
      do {
        var index_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException.<anonymous>.<anonymous>' call
        this_0.q7(_Char___init__impl__6a9atx(32));
      }
       while (inductionVariable < cur);
    this_0.q7(_Char___init__impl__6a9atx(94));
    this_0.q7(_Char___init__impl__6a9atx(32));
    this_0.p7(position);
    this_0.q7(_Char___init__impl__6a9atx(10));
    var tmp$ret$3 = this_0.toString();
    return new YamlDecodingException(tmp$ret$3, throwable);
  }
  function get_lineNumberAndCurrentLine(_this__u8e3s4) {
    var lineStartingCur = {_v: 0};
    var isLastLineSeparator = {_v: 0};
    var _lineNumber = {_v: 1};
    // Inline function 'kotlin.text.isNotEmpty' call
    var this_0 = _this__u8e3s4.v1k_1;
    if (charSequenceLength(this_0) > 0) {
      var inductionVariable = 0;
      var last = coerceIn(_this__u8e3s4.w1k_1 - 1 | 0, get_indices(_this__u8e3s4.v1k_1));
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          _get_lineNumberAndCurrentLine_$read_mo10xu(_this__u8e3s4, isLastLineSeparator, lineStartingCur, _lineNumber, i);
        }
         while (!(i === last));
    }
    var tmp = _lineNumber._v - isLastLineSeparator._v | 0;
    var tmp1 = _this__u8e3s4.v1k_1;
    var tmp2 = lineStartingCur._v;
    // Inline function 'kotlin.text.substring' call
    var endIndex = _this__u8e3s4.w1k_1 - isLastLineSeparator._v | 0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$2 = tmp1.substring(tmp2, endIndex);
    return new Pair(tmp, tmp$ret$2);
  }
  function limitLast(_this__u8e3s4, length) {
    if (_this__u8e3s4.length <= length)
      return _this__u8e3s4;
    return '...' + takeLast(_this__u8e3s4, length);
  }
  function limitFirst(_this__u8e3s4, length) {
    if (_this__u8e3s4.length <= length)
      return _this__u8e3s4;
    return take(_this__u8e3s4, length) + '...';
  }
  function readLine(_this__u8e3s4) {
    var buffer = StringBuilder_init_$Create$();
    // Inline function 'net.mamoe.yamlkt.internal.whileNotEOF' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop;
      }
      var tmp1 = _this__u8e3s4.w1k_1;
      _this__u8e3s4.w1k_1 = tmp1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.readLine.<anonymous>' call
      var it = charSequenceGet(_this__u8e3s4.v1k_1, tmp1);
      // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
      if (it === _Char___init__impl__6a9atx(10) || it === _Char___init__impl__6a9atx(13))
        return buffer.toString();
      buffer.q7(it);
    }
    return buffer.toString();
  }
  function _get_lineNumberAndCurrentLine_$read_mo10xu($this_lineNumberAndCurrentLine, isLastLineSeparator, lineStartingCur, _lineNumber, i) {
    // Inline function 'kotlin.also' call
    var this_0 = new Char(charSequenceGet($this_lineNumberAndCurrentLine.v1k_1, i));
    // Inline function 'net.mamoe.yamlkt.internal.<get-lineNumberAndCurrentLine>.read.<anonymous>' call
    var char = this_0.a1_1;
    if (!(isLastLineSeparator._v === 0)) {
      lineStartingCur._v = (i + 1 | 0) - isLastLineSeparator._v | 0;
      isLastLineSeparator._v = 0;
    }
    // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
    if (char === _Char___init__impl__6a9atx(10) || char === _Char___init__impl__6a9atx(13)) {
      isLastLineSeparator._v = isLastLineSeparator._v + 1 | 0;
      _lineNumber._v = _lineNumber._v + 1 | 0;
    }
    return this_0.a1_1;
  }
  function HexConverter() {
    HexConverter_instance = this;
    var tmp = this;
    var tmp_0 = 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(16), null);
    while (tmp_0 < 16) {
      var tmp_2 = tmp_0;
      // Inline function 'kotlin.math.pow' call
      var tmp$ret$1 = Math.pow(16.0, tmp_2);
      tmp_1[tmp_2] = numberToLong(tmp$ret$1);
      tmp_0 = tmp_0 + 1 | 0;
    }
    tmp.n1l_1 = tmp_1;
  }
  protoOf(HexConverter).o1l = function (value, offset, length) {
    // Inline function 'kotlin.check' call
    if (!((value.length - offset | 0) <= 16)) {
      // Inline function 'net.mamoe.yamlkt.internal.HexConverter.hexToLong.<anonymous>' call
      var message = 'max 16 bits, but found ' + (value.length - offset | 0);
      throw IllegalStateException_init_$Create$(toString(message));
    }
    // Inline function 'net.mamoe.yamlkt.internal.foldFromRightOffsetIndexed' call
    var accumulator = new Long(0, 0);
    var lastIndex = (offset + length | 0) - 1 | 0;
    var index = 0;
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'net.mamoe.yamlkt.internal.foldFromRightOffsetIndexed.<anonymous>' call
        var element = value[lastIndex - index_0 | 0];
        var tmp0 = index;
        index = tmp0 + 1 | 0;
        // Inline function 'net.mamoe.yamlkt.internal.HexConverter.hexToLong.<anonymous>' call
        var acc = accumulator;
        var tmp;
        if (_Char___init__impl__6a9atx(65) <= element ? element <= _Char___init__impl__6a9atx(70) : false) {
          tmp = numberToLong(Char__minus_impl_a2frrh(element, _Char___init__impl__6a9atx(65)) + 10 | 0).h2(HexConverter_getInstance().n1l_1[tmp0]);
        } else if (_Char___init__impl__6a9atx(97) <= element ? element <= _Char___init__impl__6a9atx(102) : false) {
          tmp = numberToLong(Char__minus_impl_a2frrh(element, _Char___init__impl__6a9atx(97)) + 10 | 0).h2(HexConverter_getInstance().n1l_1[tmp0]);
        } else if (_Char___init__impl__6a9atx(48) <= element ? element <= _Char___init__impl__6a9atx(57) : false) {
          tmp = numberToLong(Char__minus_impl_a2frrh(element, _Char___init__impl__6a9atx(48))).h2(HexConverter_getInstance().n1l_1[tmp0]);
        } else {
          var message_0 = "illegal digit '" + toString_0(element) + "' in hexadecimal string " + toString(value);
          throw IllegalStateException_init_$Create$(toString(message_0));
        }
        accumulator = acc.f2(tmp);
      }
       while (inductionVariable < length);
    return accumulator;
  };
  var HexConverter_instance;
  function HexConverter_getInstance() {
    if (HexConverter_instance == null)
      new HexConverter();
    return HexConverter_instance;
  }
  var enabled0;
  var logIndent0;
  var decodeValue0;
  function space($this, count) {
    return repeat(' ', coerceAtLeast(count, 0));
  }
  function access$space($this, count) {
    return space($this, count);
  }
  function Debugging() {
    Debugging_instance = this;
    this.p1l_1 = enabled0$factory();
    this.q1l_1 = logIndent0$factory();
    this.r1l_1 = decodeValue0$factory();
  }
  protoOf(Debugging).s1l = function (_set____db54di) {
    var tmp0 = this.p1l_1;
    enabled$factory();
    tmp0.set(_set____db54di);
    return Unit_instance;
  };
  protoOf(Debugging).t1l = function () {
    var tmp0 = this.p1l_1;
    // Inline function 'kotlin.getValue' call
    enabled$factory_0();
    return tmp0.get();
  };
  protoOf(Debugging).u1l = function (_set____db54di) {
    var tmp0 = this.q1l_1;
    logIndent$factory();
    tmp0.set(_set____db54di);
    return Unit_instance;
  };
  protoOf(Debugging).v1l = function () {
    var tmp0 = this.q1l_1;
    // Inline function 'kotlin.getValue' call
    logIndent$factory_0();
    return tmp0.get();
  };
  protoOf(Debugging).w1l = function (descriptor, decoder) {
    if (!this.t1l())
      return Unit_instance;
    if (!this.t1l())
      return Unit_instance;
    if (decoder == null) {
      println(space(this, this.v1l()) + (descriptor.m1g() + ' {'));
    } else {
      var tmp;
      if (decoder instanceof IndentedDecoder) {
        tmp = 'indented ' + decoder.a1m_1 + ' ';
      } else {
        tmp = '';
      }
      var indent = tmp;
      println(space(this, this.v1l()) + (descriptor.m1g() + ' by ' + decoder.q1k_1 + ' ' + indent + '{'));
    }
    this.u1l(this.v1l() + 4 | 0);
  };
  protoOf(Debugging).c1m = function () {
    if (!this.t1l())
      return Unit_instance;
    this.u1l(this.v1l() - 4 | 0);
    println(space(this, this.v1l()) + '}');
  };
  var Debugging_instance;
  function Debugging_getInstance() {
    if (Debugging_instance == null)
      new Debugging();
    return Debugging_instance;
  }
  function enabled0$factory() {
    return getPropertyCallableRef('enabled0', 0, KMutableProperty0, function () {
      return enabled0;
    }, function (value) {
      enabled0 = value;
      return Unit_instance;
    });
  }
  function logIndent0$factory() {
    return getPropertyCallableRef('logIndent0', 0, KMutableProperty0, function () {
      return logIndent0;
    }, function (value) {
      logIndent0 = value;
      return Unit_instance;
    });
  }
  function decodeValue0$factory() {
    return getPropertyCallableRef('decodeValue0', 0, KMutableProperty0, function () {
      return decodeValue0;
    }, function (value) {
      decodeValue0 = value;
      return Unit_instance;
    });
  }
  function enabled$factory() {
    return getPropertyCallableRef('enabled', 1, KMutableProperty1, function (receiver) {
      return receiver.t1l();
    }, function (receiver, value) {
      return receiver.s1l(value);
    });
  }
  function enabled$factory_0() {
    return getPropertyCallableRef('enabled', 1, KMutableProperty1, function (receiver) {
      return receiver.t1l();
    }, function (receiver, value) {
      return receiver.s1l(value);
    });
  }
  function logIndent$factory() {
    return getPropertyCallableRef('logIndent', 1, KMutableProperty1, function (receiver) {
      return receiver.v1l();
    }, function (receiver, value) {
      return receiver.u1l(value);
    });
  }
  function logIndent$factory_0() {
    return getPropertyCallableRef('logIndent', 1, KMutableProperty1, function (receiver) {
      return receiver.v1l();
    }, function (receiver, value) {
      return receiver.u1l(value);
    });
  }
  function get_LONG_AS_DOUBLE_RANGE() {
    _init_properties_DynamicSerializersUtils_kt__oar70j();
    return LONG_AS_DOUBLE_RANGE;
  }
  var LONG_AS_DOUBLE_RANGE;
  function get_INT_AS_DOUBLE_RANGE() {
    _init_properties_DynamicSerializersUtils_kt__oar70j();
    return INT_AS_DOUBLE_RANGE;
  }
  var INT_AS_DOUBLE_RANGE;
  function adjustDynamicString(_this__u8e3s4, quoted) {
    _init_properties_DynamicSerializersUtils_kt__oar70j();
    if (quoted)
      return _this__u8e3s4;
    var tmp;
    switch (_this__u8e3s4) {
      case 'true':
      case 'TRUE':
        tmp = true;
        break;
      case 'false':
      case 'FALSE':
        tmp = false;
        break;
      default:
        var tmp1_elvis_lhs = toDoubleOrNull(_this__u8e3s4);
        var tmp_0;
        if (tmp1_elvis_lhs == null) {
          return _this__u8e3s4;
        } else {
          tmp_0 = tmp1_elvis_lhs;
        }

        var double = tmp_0;
        if (contains(_this__u8e3s4, _Char___init__impl__6a9atx(46)))
          return double;
        tmp = get_INT_AS_DOUBLE_RANGE().v(double) ? numberToInt(double) : get_LONG_AS_DOUBLE_RANGE().v(double) ? numberToLong(double) : double;
        break;
    }
    return tmp;
  }
  var properties_initialized_DynamicSerializersUtils_kt_uymji7;
  function _init_properties_DynamicSerializersUtils_kt__oar70j() {
    if (!properties_initialized_DynamicSerializersUtils_kt_uymji7) {
      properties_initialized_DynamicSerializersUtils_kt_uymji7 = true;
      LONG_AS_DOUBLE_RANGE = rangeTo((new Long(0, -2147483648)).q2(), (new Long(-1, 2147483647)).q2());
      INT_AS_DOUBLE_RANGE = rangeTo(-2147483648, 2147483647);
    }
  }
  var REPLACEMENT_CHARS;
  function readUnquotedString(_this__u8e3s4, stopOnComma, begin) {
    _init_properties_Escape_kt__aetfvj();
    var startingIndent = _this__u8e3s4.x1k_1;
    var startCur = {_v: _this__u8e3s4.w1k_1 - 1 | 0};
    var escapedOnce = {_v: false};
    var tmp = _this__u8e3s4;
    var tmp_0 = _this__u8e3s4.y1k_1;
    // Inline function 'net.mamoe.yamlkt.internal.countSkipIf' call
    // Inline function 'kotlin.contracts.contract' call
    var start = _this__u8e3s4.w1k_1;
    $l$loop_0: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_0;
      }
      // Inline function 'net.mamoe.yamlkt.internal.readUnquotedString.<anonymous>' call
      if (charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(32)) {
        _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      } else {
        break $l$loop_0;
      }
    }
    tmp.y1k_1 = tmp_0 + (_this__u8e3s4.w1k_1 - start | 0) | 0;
    // Inline function 'net.mamoe.yamlkt.internal.whileNotEOFWithBegin' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'net.mamoe.yamlkt.internal.readUnquotedString.<anonymous>' call
    // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
    if (begin === _Char___init__impl__6a9atx(10) || begin === _Char___init__impl__6a9atx(13)) {
      _this__u8e3s4.x1k_1 = 0;
      _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur._v, _this__u8e3s4.w1k_1 - 2 | 0);
      escapedOnce._v = true;
      if (!runNewLineSkippingAndEscapingForUnquoted(_this__u8e3s4, startingIndent)) {
        return _this__u8e3s4.g1m();
      }
      startCur._v = _this__u8e3s4.w1k_1;
    } else {
      if (begin === _Char___init__impl__6a9atx(58)) {
        _this__u8e3s4.i1m(Token_COLON_getInstance());
        return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
      } else if (begin === _Char___init__impl__6a9atx(44)) {
        if (stopOnComma) {
          _this__u8e3s4.i1m(Token_COMMA_getInstance());
          return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
        }
      } else if (begin === _Char___init__impl__6a9atx(124)) {
        return readMultilineString(_this__u8e3s4, readLinesForMultilineLiteralString$ref());
      } else if (begin === _Char___init__impl__6a9atx(62)) {
        return readMultilineString(_this__u8e3s4, readLinesForMultilineFoldedString$ref());
      } else if (begin === _Char___init__impl__6a9atx(91)) {
        _this__u8e3s4.i1m(Token_LIST_BEGIN_getInstance());
        return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
      } else if (begin === _Char___init__impl__6a9atx(93)) {
        _this__u8e3s4.i1m(Token_LIST_END_getInstance());
        return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
      } else if (begin === _Char___init__impl__6a9atx(123)) {
        _this__u8e3s4.i1m(Token_MAP_BEGIN_getInstance());
        return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
      } else if (begin === _Char___init__impl__6a9atx(125)) {
        _this__u8e3s4.i1m(Token_MAP_END_getInstance());
        return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
      } else if (begin === _Char___init__impl__6a9atx(35)) {
        // Inline function 'kotlin.run' call
        // Inline function 'net.mamoe.yamlkt.internal.readUnquotedString.<anonymous>.<anonymous>' call
        var tmp_1;
        if (!escapedOnce._v) {
          tmp_1 = _this__u8e3s4.h1m(startCur._v, _this__u8e3s4.w1k_1 - 1 | 0);
        } else {
          _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur._v, _this__u8e3s4.w1k_1 - 2 | 0);
          tmp_1 = _this__u8e3s4.g1m();
        }
        var toString = tmp_1;
        skipLine(_this__u8e3s4);
        _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 - 1 | 0;
        _this__u8e3s4.x1k_1 = 0;
        return toString;
      }
    }
    $l$loop_1: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_1;
      }
      var tmp1 = _this__u8e3s4.w1k_1;
      _this__u8e3s4.w1k_1 = tmp1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.readUnquotedString.<anonymous>' call
      var char = charSequenceGet(_this__u8e3s4.v1k_1, tmp1);
      // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
      if (char === _Char___init__impl__6a9atx(10) || char === _Char___init__impl__6a9atx(13)) {
        _this__u8e3s4.x1k_1 = 0;
        _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur._v, _this__u8e3s4.w1k_1 - 2 | 0);
        escapedOnce._v = true;
        if (!runNewLineSkippingAndEscapingForUnquoted(_this__u8e3s4, startingIndent)) {
          return _this__u8e3s4.g1m();
        }
        startCur._v = _this__u8e3s4.w1k_1;
      } else {
        if (char === _Char___init__impl__6a9atx(58)) {
          _this__u8e3s4.i1m(Token_COLON_getInstance());
          return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
        } else if (char === _Char___init__impl__6a9atx(44)) {
          if (stopOnComma) {
            _this__u8e3s4.i1m(Token_COMMA_getInstance());
            return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
          }
        } else if (char === _Char___init__impl__6a9atx(124)) {
          return readMultilineString(_this__u8e3s4, readLinesForMultilineLiteralString$ref_0());
        } else if (char === _Char___init__impl__6a9atx(62)) {
          return readMultilineString(_this__u8e3s4, readLinesForMultilineFoldedString$ref_0());
        } else if (char === _Char___init__impl__6a9atx(91)) {
          _this__u8e3s4.i1m(Token_LIST_BEGIN_getInstance());
          return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
        } else if (char === _Char___init__impl__6a9atx(93)) {
          _this__u8e3s4.i1m(Token_LIST_END_getInstance());
          return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
        } else if (char === _Char___init__impl__6a9atx(123)) {
          _this__u8e3s4.i1m(Token_MAP_BEGIN_getInstance());
          return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
        } else if (char === _Char___init__impl__6a9atx(125)) {
          _this__u8e3s4.i1m(Token_MAP_END_getInstance());
          return readUnquotedString$doEnd(escapedOnce, _this__u8e3s4, startCur);
        } else if (char === _Char___init__impl__6a9atx(35)) {
          // Inline function 'kotlin.run' call
          // Inline function 'net.mamoe.yamlkt.internal.readUnquotedString.<anonymous>.<anonymous>' call
          var tmp_2;
          if (!escapedOnce._v) {
            tmp_2 = _this__u8e3s4.h1m(startCur._v, _this__u8e3s4.w1k_1 - 1 | 0);
          } else {
            _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur._v, _this__u8e3s4.w1k_1 - 2 | 0);
            tmp_2 = _this__u8e3s4.g1m();
          }
          var toString_0 = tmp_2;
          skipLine(_this__u8e3s4);
          _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 - 1 | 0;
          _this__u8e3s4.x1k_1 = 0;
          return toString_0;
        }
      }
    }
    if (!escapedOnce._v) {
      return _this__u8e3s4.h1m(startCur._v, _this__u8e3s4.w1k_1);
    }
    _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur._v, _this__u8e3s4.w1k_1 - 1 | 0);
    return _this__u8e3s4.g1m();
  }
  function readSingleQuotedString(_this__u8e3s4) {
    _init_properties_Escape_kt__aetfvj();
    var startCur = _this__u8e3s4.w1k_1;
    var escapedOnce = false;
    // Inline function 'net.mamoe.yamlkt.internal.skipIf' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop_0: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_0;
      }
      // Inline function 'net.mamoe.yamlkt.internal.readSingleQuotedString.<anonymous>' call
      if (charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(32)) {
        _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      } else {
        break $l$loop_0;
      }
    }
    // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
    var this_0 = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1);
    if (this_0 === _Char___init__impl__6a9atx(10) || this_0 === _Char___init__impl__6a9atx(13)) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      escapedOnce = true;
      runNewLineSkippingAndEscaping(_this__u8e3s4);
      startCur = _this__u8e3s4.w1k_1;
    }
    // Inline function 'net.mamoe.yamlkt.internal.whileNotEOF' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop_1: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_1;
      }
      var tmp1 = _this__u8e3s4.w1k_1;
      _this__u8e3s4.w1k_1 = tmp1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.readSingleQuotedString.<anonymous>' call
      var char = charSequenceGet(_this__u8e3s4.v1k_1, tmp1);
      if (char === _Char___init__impl__6a9atx(39)) {
        var tmp;
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
          tmp = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(39);
        } else {
          tmp = false;
        }
        if (tmp) {
          _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
          _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur, _this__u8e3s4.w1k_1 - 2 | 0);
          escapedOnce = true;
          startCur = _this__u8e3s4.w1k_1;
        } else {
          if (!escapedOnce) {
            var tmp1_0 = _this__u8e3s4.v1k_1;
            var tmp2 = startCur;
            // Inline function 'kotlin.text.substring' call
            var endIndex = _this__u8e3s4.w1k_1 - 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            return tmp1_0.substring(tmp2, endIndex);
          }
          _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur, _this__u8e3s4.w1k_1 - 2 | 0);
          return _this__u8e3s4.j1m();
        }
      } else {
        // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
        if (char === _Char___init__impl__6a9atx(10) || char === _Char___init__impl__6a9atx(13)) {
          _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur, _this__u8e3s4.w1k_1 - 2 | 0);
          runNewLineSkippingAndEscaping(_this__u8e3s4);
          startCur = _this__u8e3s4.w1k_1;
          escapedOnce = true;
        }
      }
    }
    // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
    var hint = 'Unexpected EOF';
    throw contextualDecodingException(_this__u8e3s4, hint, null, -1);
  }
  function readDoubleQuotedString(_this__u8e3s4) {
    _init_properties_Escape_kt__aetfvj();
    var startCur = _this__u8e3s4.w1k_1;
    var escapedOnce = false;
    // Inline function 'net.mamoe.yamlkt.internal.skipIf' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop_0: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_0;
      }
      // Inline function 'net.mamoe.yamlkt.internal.readDoubleQuotedString.<anonymous>' call
      if (charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(32)) {
        _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      } else {
        break $l$loop_0;
      }
    }
    // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
    var this_0 = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1);
    if (this_0 === _Char___init__impl__6a9atx(10) || this_0 === _Char___init__impl__6a9atx(13)) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      escapedOnce = true;
      runNewLineSkippingAndEscaping(_this__u8e3s4);
      startCur = _this__u8e3s4.w1k_1;
    }
    // Inline function 'net.mamoe.yamlkt.internal.whileNotEOF' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop_1: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_1;
      }
      var tmp1 = _this__u8e3s4.w1k_1;
      _this__u8e3s4.w1k_1 = tmp1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.readDoubleQuotedString.<anonymous>' call
      var char = charSequenceGet(_this__u8e3s4.v1k_1, tmp1);
      if (char === _Char___init__impl__6a9atx(34)) {
        if (!escapedOnce) {
          var tmp0 = _this__u8e3s4.v1k_1;
          var tmp1_0 = startCur;
          // Inline function 'kotlin.text.substring' call
          var endIndex = _this__u8e3s4.w1k_1 - 1 | 0;
          // Inline function 'kotlin.js.asDynamic' call
          return tmp0.substring(tmp1_0, endIndex);
        }
        _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur, _this__u8e3s4.w1k_1 - 2 | 0);
        return _this__u8e3s4.j1m();
      } else {
        // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
        if (char === _Char___init__impl__6a9atx(10) || char === _Char___init__impl__6a9atx(13)) {
          _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur, _this__u8e3s4.w1k_1 - 2 | 0);
          runNewLineSkippingAndEscaping(_this__u8e3s4);
          startCur = _this__u8e3s4.w1k_1;
          escapedOnce = true;
        } else {
          if (char === _Char___init__impl__6a9atx(92)) {
            _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, startCur, _this__u8e3s4.w1k_1 - 2 | 0);
            startCur = _this__u8e3s4.w1k_1 + 1 | 0;
            escapedOnce = true;
            // Inline function 'net.mamoe.yamlkt.internal.ensureNotEOF' call
            // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
            if (_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length) {
              // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
              var hint = 'Unexpected EOF';
              throw contextualDecodingException(_this__u8e3s4, hint, null, -1);
            }
            var tmp1_1 = _this__u8e3s4.w1k_1;
            _this__u8e3s4.w1k_1 = tmp1_1 + 1 | 0;
            var esChar = charSequenceGet(_this__u8e3s4.v1k_1, tmp1_1);
            // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
            if (esChar === _Char___init__impl__6a9atx(10) || esChar === _Char___init__impl__6a9atx(13)) {
              // Inline function 'net.mamoe.yamlkt.internal.skipIf' call
              // Inline function 'kotlin.contracts.contract' call
              $l$loop_3: while (true) {
                // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
                if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
                  break $l$loop_3;
                }
                // Inline function 'net.mamoe.yamlkt.internal.readDoubleQuotedString.<anonymous>.stub_for_inlining' call
                var p0 = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1);
                if (isWhitespace(p0)) {
                  _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
                } else {
                  break $l$loop_3;
                }
              }
              startCur = _this__u8e3s4.w1k_1;
            } else {
              if (isWhitespace(esChar)) {
                _this__u8e3s4.m1m(_Char___init__impl__6a9atx(32));
                startCur = _this__u8e3s4.w1k_1;
              } else {
                // Inline function 'kotlin.code' call
                var tmp$ret$12 = Char__toInt_impl_vasixd(esChar);
                var es = escapeToChar(tmp$ret$12);
                if (!(es === _Char___init__impl__6a9atx(0))) {
                  _this__u8e3s4.m1m(es);
                  startCur = _this__u8e3s4.w1k_1;
                } else {
                  var tmp;
                  if (esChar === _Char___init__impl__6a9atx(120)) {
                    tmp = 2;
                  } else if (esChar === _Char___init__impl__6a9atx(117)) {
                    tmp = 4;
                  } else if (esChar === _Char___init__impl__6a9atx(85)) {
                    tmp = 8;
                  } else {
                    // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
                    var hint_0 = "Illegal escape '" + toString_0(esChar) + "' when reading double quoted String";
                    throw contextualDecodingException(_this__u8e3s4, hint_0, null, -1);
                  }
                  var digitCount = tmp;
                  // Inline function 'kotlin.repeat' call
                  var inductionVariable = 0;
                  if (inductionVariable < digitCount)
                    do {
                      var index = inductionVariable;
                      inductionVariable = inductionVariable + 1 | 0;
                      // Inline function 'net.mamoe.yamlkt.internal.readDoubleQuotedString.<anonymous>.<anonymous>' call
                      $l$block: {
                        // Inline function 'net.mamoe.yamlkt.internal.useNext' call
                        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
                        if (_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length) {
                          break $l$block;
                        }
                        var tmp1_2 = _this__u8e3s4.w1k_1;
                        _this__u8e3s4.w1k_1 = tmp1_2 + 1 | 0;
                        // Inline function 'kotlin.let' call
                        var c = charSequenceGet(_this__u8e3s4.v1k_1, tmp1_2);
                        // Inline function 'net.mamoe.yamlkt.internal.isHexDigit' call
                        if (!((_Char___init__impl__6a9atx(48) <= c ? c <= _Char___init__impl__6a9atx(57) : false) || (_Char___init__impl__6a9atx(97) <= c ? c <= _Char___init__impl__6a9atx(102) : false) || (_Char___init__impl__6a9atx(65) <= c ? c <= _Char___init__impl__6a9atx(70) : false))) {
                          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
                          var hint_1 = "Expected hex digit but found '" + toString_0(c) + "'";
                          throw contextualDecodingException(_this__u8e3s4, hint_1, null, -1);
                        }
                        _this__u8e3s4.k1m(c);
                      }
                    }
                     while (inductionVariable < digitCount);
                  startCur = _this__u8e3s4.w1k_1;
                  _this__u8e3s4.l1m();
                }
              }
            }
          }
        }
      }
    }
    // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
    var hint_2 = 'Unexpected EOF';
    throw contextualDecodingException(_this__u8e3s4, hint_2, null, -1);
  }
  function runNewLineSkippingAndEscapingForUnquoted(_this__u8e3s4, initialIntent, addCaret) {
    addCaret = addCaret === VOID ? true : addCaret;
    _init_properties_Escape_kt__aetfvj();
    var $this = _this__u8e3s4;
    var initialIntent_0 = initialIntent;
    var addCaret_0 = addCaret;
    $l$1: do {
      $l$0: do {
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        var this_0 = $this;
        if (this_0.w1k_1 === this_0.v1k_1.length)
          return true;
        // Inline function 'net.mamoe.yamlkt.internal.countSkipIf' call
        var this_1 = $this;
        // Inline function 'kotlin.contracts.contract' call
        var start = this_1.w1k_1;
        $l$loop_0: while (true) {
          // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
          if (!!(this_1.w1k_1 === this_1.v1k_1.length)) {
            break $l$loop_0;
          }
          // Inline function 'net.mamoe.yamlkt.internal.runNewLineSkippingAndEscapingForUnquoted.<anonymous>' call
          if (charSequenceGet(this_1.v1k_1, this_1.w1k_1) === _Char___init__impl__6a9atx(32)) {
            this_1.w1k_1 = this_1.w1k_1 + 1 | 0;
          } else {
            break $l$loop_0;
          }
        }
        var newIntent = this_1.w1k_1 - start | 0;
        if (newIntent <= initialIntent_0) {
          var tmp0_this = $this;
          tmp0_this.w1k_1 = tmp0_this.w1k_1 - newIntent | 0;
          return false;
        }
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        var this_2 = $this;
        if (this_2.w1k_1 === this_2.v1k_1.length)
          return true;
        var next = charSequenceGet($this.v1k_1, $this.w1k_1);
        var tmp;
        // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
        if (next === _Char___init__impl__6a9atx(10) || next === _Char___init__impl__6a9atx(13)) {
          var tmp1_this = $this;
          tmp1_this.w1k_1 = tmp1_this.w1k_1 + 1 | 0;
          $this.m1m(_Char___init__impl__6a9atx(10));
          var tmp0 = $this;
          var tmp1 = initialIntent_0;
          $this = tmp0;
          initialIntent_0 = tmp1;
          addCaret_0 = false;
          continue $l$0;
        } else {
          if (addCaret_0) {
            $this.m1m(_Char___init__impl__6a9atx(32));
          }
          tmp = true;
        }
        return tmp;
      }
       while (false);
    }
     while (true);
  }
  function readMultilineString(_this__u8e3s4, readLines) {
    _init_properties_Escape_kt__aetfvj();
    var tmp0_container = takeChompCharacter(_this__u8e3s4);
    var trimEnd_0 = tmp0_container.sb();
    var keepTrailingNewlines = tmp0_container.tb();
    advanceToEndOfLineThrowIfNotWhitespace(_this__u8e3s4);
    // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
    if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    var tmp3_container = advanceToNextNonBlankLine(_this__u8e3s4);
    var firstLineIndent = tmp3_container.sb();
    var prependedNewlineCount = tmp3_container.tb();
    if (firstLineIndent < _this__u8e3s4.x1k_1) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 - (firstLineIndent + 1 | 0) | 0;
      }
      return _this__u8e3s4.g1m();
    }
    var inductionVariable = 0;
    if (inductionVariable < prependedNewlineCount)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
      }
       while (inductionVariable < prependedNewlineCount);
    readLines(_this__u8e3s4, firstLineIndent, keepTrailingNewlines);
    var tmp;
    if (trimEnd_0) {
      // Inline function 'kotlin.text.trimEnd' call
      var this_0 = _this__u8e3s4.g1m();
      tmp = toString(trimEnd(isCharSequence(this_0) ? this_0 : THROW_CCE()));
    } else if (keepTrailingNewlines) {
      tmp = _this__u8e3s4.g1m();
    } else {
      // Inline function 'kotlin.text.trimEnd' call
      var this_1 = _this__u8e3s4.g1m();
      tmp = toString(trimEnd(isCharSequence(this_1) ? this_1 : THROW_CCE())) + '\n';
    }
    return tmp;
  }
  function readLinesForMultilineLiteralString(_this__u8e3s4, foldingIndent, keepTrailingLines) {
    _init_properties_Escape_kt__aetfvj();
    var lineNumber = 0;
    var currentLineIndent = foldingIndent;
    var previousLineBlank = true;
    var trailingBlankLines = 0;
    $l$loop: while (true) {
      var tmp;
      if (currentLineIndent >= foldingIndent) {
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        tmp = !(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length);
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop;
      }
      readLineForMultilineLiteralString(_this__u8e3s4, lineNumber, foldingIndent, currentLineIndent, previousLineBlank);
      var tmp0_container = advanceToNextNonBlankLine(_this__u8e3s4);
      var nextIndent = tmp0_container.sb();
      var blankLineCount = tmp0_container.tb();
      previousLineBlank = blankLineCount > 0;
      trailingBlankLines = blankLineCount;
      currentLineIndent = nextIndent;
      var inductionVariable = 0;
      if (inductionVariable < blankLineCount)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
        }
         while (inductionVariable < blankLineCount);
      lineNumber = lineNumber + 1 | 0;
    }
    finishMultilineString(_this__u8e3s4, foldingIndent, currentLineIndent, lineNumber, keepTrailingLines, trailingBlankLines);
  }
  function readLinesForMultilineFoldedString(_this__u8e3s4, foldingIndent, keepTrailingLines) {
    _init_properties_Escape_kt__aetfvj();
    var lineNumber = 0;
    var currentLineIndent = foldingIndent;
    var previousLineBlank = true;
    var trailingBlankLines = 0;
    $l$loop: while (true) {
      var tmp;
      if (currentLineIndent >= foldingIndent) {
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        tmp = !(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length);
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop;
      }
      readLineForMultilineFoldedString(_this__u8e3s4, lineNumber, foldingIndent, currentLineIndent, previousLineBlank);
      var tmp0_container = advanceToNextNonBlankLine(_this__u8e3s4);
      var nextIndent = tmp0_container.sb();
      var blankLineCount = tmp0_container.tb();
      previousLineBlank = blankLineCount > 0;
      trailingBlankLines = blankLineCount;
      currentLineIndent = nextIndent;
      if (blankLineCount > 0) {
        _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
      }
      lineNumber = lineNumber + 1 | 0;
    }
    finishMultilineString(_this__u8e3s4, foldingIndent, currentLineIndent, lineNumber, keepTrailingLines, trailingBlankLines);
  }
  function runNewLineSkippingAndEscaping(_this__u8e3s4, addCaret) {
    addCaret = addCaret === VOID ? true : addCaret;
    _init_properties_Escape_kt__aetfvj();
    var $this = _this__u8e3s4;
    var addCaret_0 = addCaret;
    $l$1: do {
      $l$0: do {
        // Inline function 'net.mamoe.yamlkt.internal.ensureNotEOF' call
        var this_0 = $this;
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        if (this_0.w1k_1 === this_0.v1k_1.length) {
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
          var hint = 'Unexpected EOF';
          throw contextualDecodingException(this_0, hint, null, -1);
        }
        // Inline function 'net.mamoe.yamlkt.internal.skipIf' call
        var this_1 = $this;
        // Inline function 'kotlin.contracts.contract' call
        $l$loop_0: while (true) {
          // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
          if (!!(this_1.w1k_1 === this_1.v1k_1.length)) {
            break $l$loop_0;
          }
          // Inline function 'net.mamoe.yamlkt.internal.runNewLineSkippingAndEscaping.<anonymous>' call
          if (charSequenceGet(this_1.v1k_1, this_1.w1k_1) === _Char___init__impl__6a9atx(32)) {
            this_1.w1k_1 = this_1.w1k_1 + 1 | 0;
          } else {
            break $l$loop_0;
          }
        }
        // Inline function 'net.mamoe.yamlkt.internal.ensureNotEOF' call
        var this_2 = $this;
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        if (this_2.w1k_1 === this_2.v1k_1.length) {
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
          var hint_0 = 'Unexpected EOF';
          throw contextualDecodingException(this_2, hint_0, null, -1);
        }
        var next = charSequenceGet($this.v1k_1, $this.w1k_1);
        // Inline function 'net.mamoe.yamlkt.internal.isLineSeparator' call
        if (next === _Char___init__impl__6a9atx(10) || next === _Char___init__impl__6a9atx(13)) {
          var tmp0_this = $this;
          tmp0_this.w1k_1 = tmp0_this.w1k_1 + 1 | 0;
          $this.m1m(_Char___init__impl__6a9atx(10));
          $this = $this;
          addCaret_0 = false;
          continue $l$0;
        } else {
          if (addCaret_0) {
            $this.m1m(_Char___init__impl__6a9atx(32));
          }
          return Unit_instance;
        }
      }
       while (false);
    }
     while (true);
  }
  function escapeToChar(c) {
    _init_properties_Escape_kt__aetfvj();
    return c < 117 ? EscapeCharMappings_getInstance().n1m_1[c] : _Char___init__impl__6a9atx(0);
  }
  function takeChompCharacter(_this__u8e3s4) {
    _init_properties_Escape_kt__aetfvj();
    var tmp;
    // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
    if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
      tmp = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1);
    } else {
      tmp = _Char___init__impl__6a9atx(10);
    }
    var startChar = tmp;
    var trimEnd = startChar === _Char___init__impl__6a9atx(45);
    var keepTrailingNewlines = startChar === _Char___init__impl__6a9atx(43);
    if (keepTrailingNewlines || trimEnd) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    return new Pair(trimEnd, keepTrailingNewlines);
  }
  function advanceToEndOfLineThrowIfNotWhitespace(_this__u8e3s4) {
    _init_properties_Escape_kt__aetfvj();
    $l$loop: while (true) {
      var tmp;
      var tmp_0;
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        tmp_0 = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(32);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = !(charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(10));
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop;
      }
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    var tmp_1;
    // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
    if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
      tmp_1 = !(charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(10));
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint = "Only whitespace allowed after '>'";
      throw contextualDecodingException(_this__u8e3s4, hint, null, -1);
    }
  }
  function advanceToNextNonBlankLine(_this__u8e3s4) {
    _init_properties_Escape_kt__aetfvj();
    // Inline function 'net.mamoe.yamlkt.internal.countSkipIf' call
    // Inline function 'kotlin.contracts.contract' call
    var start = _this__u8e3s4.w1k_1;
    $l$loop_0: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        break $l$loop_0;
      }
      // Inline function 'net.mamoe.yamlkt.internal.advanceToNextNonBlankLine.<anonymous>' call
      if (charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(32)) {
        _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      } else {
        break $l$loop_0;
      }
    }
    var lineIndent = _this__u8e3s4.w1k_1 - start | 0;
    var prependedNewlineCount = 0;
    $l$loop_1: while (true) {
      var tmp;
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        tmp = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(10);
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop_1;
      }
      prependedNewlineCount = prependedNewlineCount + 1 | 0;
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.countSkipIf' call
      // Inline function 'kotlin.contracts.contract' call
      var start_0 = _this__u8e3s4.w1k_1;
      $l$loop_3: while (true) {
        // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
        if (!!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
          break $l$loop_3;
        }
        // Inline function 'net.mamoe.yamlkt.internal.advanceToNextNonBlankLine.<anonymous>' call
        if (charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(32)) {
          _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
        } else {
          break $l$loop_3;
        }
      }
      lineIndent = _this__u8e3s4.w1k_1 - start_0 | 0;
    }
    return new Pair(lineIndent, prependedNewlineCount);
  }
  function readLineForMultilineLiteralString(_this__u8e3s4, lineNumber, foldingIndent, lineIndent, previousLineBlank) {
    _init_properties_Escape_kt__aetfvj();
    var lineStart = _this__u8e3s4.w1k_1;
    var lineLength = 0;
    $l$loop: while (true) {
      var tmp;
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        tmp = !(charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(10));
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop;
      }
      lineLength = lineLength + 1 | 0;
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    if (lineNumber > 0) {
      _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
      if (lineIndent > foldingIndent) {
        var inductionVariable = lineIndent;
        var last = foldingIndent + 1 | 0;
        if (last <= inductionVariable)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            _this__u8e3s4.m1m(_Char___init__impl__6a9atx(32));
          }
           while (!(i === last));
      }
    }
    if (lineLength > 0) {
      _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, lineStart, _this__u8e3s4.w1k_1 - 1 | 0);
    }
    // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
    if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    return lineLength;
  }
  function finishMultilineString(_this__u8e3s4, foldingIndent, currentLineIndent, lineNumber, keepTrailingLines, trailingBlankLines) {
    _init_properties_Escape_kt__aetfvj();
    if (keepTrailingLines) {
      var inductionVariable = 0;
      if (inductionVariable < trailingBlankLines)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
        }
         while (inductionVariable < trailingBlankLines);
    }
    if (lineNumber > 0 && currentLineIndent >= foldingIndent) {
      _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
    }
    // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
    if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 - (currentLineIndent + 1 | 0) | 0;
    }
  }
  function readLineForMultilineFoldedString(_this__u8e3s4, lineNumber, foldingIndent, lineIndent, previousLineBlank) {
    _init_properties_Escape_kt__aetfvj();
    var lineStart = _this__u8e3s4.w1k_1;
    var lineLength = 0;
    $l$loop: while (true) {
      var tmp;
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
        tmp = !(charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1) === _Char___init__impl__6a9atx(10));
      } else {
        tmp = false;
      }
      if (!tmp) {
        break $l$loop;
      }
      lineLength = lineLength + 1 | 0;
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    if (lineNumber > 0) {
      if (lineIndent > foldingIndent) {
        _this__u8e3s4.m1m(_Char___init__impl__6a9atx(10));
        var inductionVariable = lineIndent;
        var last = foldingIndent + 1 | 0;
        if (last <= inductionVariable)
          do {
            var i = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            _this__u8e3s4.m1m(_Char___init__impl__6a9atx(32));
          }
           while (!(i === last));
      } else {
        if (lineLength > 0 && !previousLineBlank) {
          _this__u8e3s4.m1m(_Char___init__impl__6a9atx(32));
        }
      }
    }
    if (lineLength > 0) {
      _this__u8e3s4.f1m(_this__u8e3s4.v1k_1, lineStart, _this__u8e3s4.w1k_1 - 1 | 0);
    }
    // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
    if (!(_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length)) {
      _this__u8e3s4.w1k_1 = _this__u8e3s4.w1k_1 + 1 | 0;
    }
    return lineLength;
  }
  function initC2ESC($this, c, esc) {
    if (!(esc === _Char___init__impl__6a9atx(117))) {
      // Inline function 'kotlin.code' call
      var tmp$ret$0 = Char__toInt_impl_vasixd(esc);
      $this.n1m_1[tmp$ret$0] = numberToChar(c);
    }
  }
  function initC2ESC_0($this, c, esc) {
    // Inline function 'kotlin.code' call
    var tmp$ret$0 = Char__toInt_impl_vasixd(c);
    return initC2ESC($this, tmp$ret$0, esc);
  }
  function EscapeCharMappings() {
    EscapeCharMappings_instance = this;
    this.n1m_1 = charArray(117);
    var inductionVariable = 0;
    if (inductionVariable <= 31)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        initC2ESC(this, i, _Char___init__impl__6a9atx(117));
      }
       while (inductionVariable <= 31);
    initC2ESC(this, 8, _Char___init__impl__6a9atx(98));
    initC2ESC(this, 9, _Char___init__impl__6a9atx(116));
    initC2ESC(this, 10, _Char___init__impl__6a9atx(110));
    initC2ESC(this, 12, _Char___init__impl__6a9atx(102));
    initC2ESC(this, 13, _Char___init__impl__6a9atx(114));
    initC2ESC_0(this, _Char___init__impl__6a9atx(47), _Char___init__impl__6a9atx(47));
    initC2ESC_0(this, _Char___init__impl__6a9atx(34), _Char___init__impl__6a9atx(34));
    initC2ESC_0(this, _Char___init__impl__6a9atx(92), _Char___init__impl__6a9atx(92));
  }
  var EscapeCharMappings_instance;
  function EscapeCharMappings_getInstance() {
    if (EscapeCharMappings_instance == null)
      new EscapeCharMappings();
    return EscapeCharMappings_instance;
  }
  function readUnquotedString$doEnd(escapedOnce, $this_readUnquotedString, startCur) {
    if (!escapedOnce._v) {
      return $this_readUnquotedString.h1m(startCur._v, $this_readUnquotedString.w1k_1 - 1 | 0);
    }
    $this_readUnquotedString.f1m($this_readUnquotedString.v1k_1, startCur._v, $this_readUnquotedString.w1k_1 - 2 | 0);
    return $this_readUnquotedString.g1m();
  }
  function readLinesForMultilineLiteralString$ref() {
    var l = function (p0, p1, p2) {
      readLinesForMultilineLiteralString(p0, p1, p2);
      return Unit_instance;
    };
    l.callableName = 'readLinesForMultilineLiteralString';
    return l;
  }
  function readLinesForMultilineFoldedString$ref() {
    var l = function (p0, p1, p2) {
      readLinesForMultilineFoldedString(p0, p1, p2);
      return Unit_instance;
    };
    l.callableName = 'readLinesForMultilineFoldedString';
    return l;
  }
  function readLinesForMultilineLiteralString$ref_0() {
    var l = function (p0, p1, p2) {
      readLinesForMultilineLiteralString(p0, p1, p2);
      return Unit_instance;
    };
    l.callableName = 'readLinesForMultilineLiteralString';
    return l;
  }
  function readLinesForMultilineFoldedString$ref_0() {
    var l = function (p0, p1, p2) {
      readLinesForMultilineFoldedString(p0, p1, p2);
      return Unit_instance;
    };
    l.callableName = 'readLinesForMultilineFoldedString';
    return l;
  }
  var properties_initialized_Escape_kt_ebzbfn;
  function _init_properties_Escape_kt__aetfvj() {
    if (!properties_initialized_Escape_kt_ebzbfn) {
      properties_initialized_Escape_kt_ebzbfn = true;
      // Inline function 'kotlin.arrayOfNulls' call
      // Inline function 'kotlin.apply' call
      var this_0 = fillArrayVal(Array(128), null);
      // Inline function 'net.mamoe.yamlkt.internal.REPLACEMENT_CHARS.<anonymous>' call
      var inductionVariable = 0;
      if (inductionVariable <= 15)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          this_0[i] = '\\u000' + i;
        }
         while (inductionVariable <= 15);
      var inductionVariable_0 = 16;
      if (inductionVariable_0 <= 31)
        do {
          var i_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          this_0[i_0] = '\\u00' + i_0;
        }
         while (inductionVariable_0 <= 31);
      // Inline function 'kotlin.code' call
      var this_1 = _Char___init__impl__6a9atx(34);
      this_0[Char__toInt_impl_vasixd(this_1)] = '\\"';
      // Inline function 'kotlin.code' call
      var this_2 = _Char___init__impl__6a9atx(92);
      this_0[Char__toInt_impl_vasixd(this_2)] = '\\\\';
      // Inline function 'kotlin.code' call
      var this_3 = _Char___init__impl__6a9atx(9);
      this_0[Char__toInt_impl_vasixd(this_3)] = '\\t';
      // Inline function 'kotlin.code' call
      var this_4 = _Char___init__impl__6a9atx(8);
      this_0[Char__toInt_impl_vasixd(this_4)] = '\\b';
      // Inline function 'kotlin.code' call
      var this_5 = _Char___init__impl__6a9atx(10);
      this_0[Char__toInt_impl_vasixd(this_5)] = '\\n';
      // Inline function 'kotlin.code' call
      var this_6 = _Char___init__impl__6a9atx(13);
      this_0[Char__toInt_impl_vasixd(this_6)] = '\\r';
      this_0[12] = '\\f';
      REPLACEMENT_CHARS = this_0;
    }
  }
  function InlineDecoder(delegate) {
    this.o1m_1 = delegate;
  }
  protoOf(InlineDecoder).g1i = function (descriptor) {
    return this.o1m_1.g1i(descriptor);
  };
  function get___values__init() {
    _init_properties_TokenStream_kt__kxgpy1();
    return __values__init;
  }
  var __values__init;
  function access$_get_valuesLastIndex__pbgabb($this) {
    return _Char___init__impl__6a9atx(125);
  }
  var Token_COMMA_instance;
  var Token_COLON_instance;
  var Token_MULTILINE_LIST_FLAG_instance;
  var Token_LIST_BEGIN_instance;
  var Token_LIST_END_instance;
  var Token_MAP_BEGIN_instance;
  var Token_MAP_END_instance;
  var Token_STRING_instance;
  var Token_STRING_NULL_instance;
  function Companion() {
    Companion_instance_0 = this;
    this.p1m_1 = get___values__init();
    this.q1m_1 = _Char___init__impl__6a9atx(125);
  }
  var Companion_instance_0;
  function Companion_getInstance() {
    Token_initEntries();
    if (Companion_instance_0 == null)
      new Companion();
    return Companion_instance_0;
  }
  var Token_entriesInitialized;
  function Token_initEntries() {
    if (Token_entriesInitialized)
      return Unit_instance;
    Token_entriesInitialized = true;
    Token_COMMA_instance = new Token('COMMA', 0, _Char___init__impl__6a9atx(44));
    Token_COLON_instance = new Token('COLON', 1, _Char___init__impl__6a9atx(58));
    Token_MULTILINE_LIST_FLAG_instance = new Token('MULTILINE_LIST_FLAG', 2, _Char___init__impl__6a9atx(45));
    Token_LIST_BEGIN_instance = new Token('LIST_BEGIN', 3, _Char___init__impl__6a9atx(91));
    Token_LIST_END_instance = new Token('LIST_END', 4, _Char___init__impl__6a9atx(93));
    Token_MAP_BEGIN_instance = new Token('MAP_BEGIN', 5, _Char___init__impl__6a9atx(123));
    Token_MAP_END_instance = new Token('MAP_END', 6, _Char___init__impl__6a9atx(125));
    Token_STRING_instance = new Token('STRING', 7, _Char___init__impl__6a9atx(32));
    Token_STRING_NULL_instance = new Token('STRING_NULL', 8, _Char___init__impl__6a9atx(32));
    Companion_getInstance();
  }
  function Token(name, ordinal, value) {
    Enum.call(this, name, ordinal);
    this.t1m_1 = value;
  }
  function prepareStringAndNextToken($this, stopOnComma, begin) {
    var tmp;
    if (begin === _Char___init__impl__6a9atx(39)) {
      $this.a1l_1 = true;
      tmp = readSingleQuotedString($this);
    } else if (begin === _Char___init__impl__6a9atx(34)) {
      $this.a1l_1 = true;
      tmp = readDoubleQuotedString($this);
    } else {
      $this.a1l_1 = false;
      // Inline function 'net.mamoe.yamlkt.internal.optimizeNull' call
      var this_0 = readUnquotedString($this, stopOnComma, begin);
      switch (this_0) {
        case '~':
        case 'null':
        case 'NULL':
          var tmp$ret$0 = null;
          break;
        default:
          tmp$ret$0 = this_0;
          break;
      }
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function TokenStream(source) {
    StringBufHolder.call(this);
    this.v1k_1 = source;
    this.w1k_1 = 0;
    this.x1k_1 = 0;
    this.y1k_1 = 0;
    this.z1k_1 = null;
    this.a1l_1 = false;
    this.b1l_1 = false;
    this.c1l_1 = 0;
    this.d1l_1 = charArray(16);
    this.e1l_1 = new Stack();
  }
  protoOf(TokenStream).h1m = function (offset, endIndex) {
    var inductionVariable = endIndex - 1 | 0;
    if (offset <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        if (!(charSequenceGet(this.v1k_1, i) === _Char___init__impl__6a9atx(32))) {
          var tmp0 = this.v1k_1;
          // Inline function 'kotlin.text.substring' call
          var endIndex_0 = i + 1 | 0;
          // Inline function 'kotlin.js.asDynamic' call
          return tmp0.substring(offset, endIndex_0);
        }
      }
       while (!(i === offset));
    return '';
  };
  protoOf(TokenStream).l1m = function () {
    if (this.c1l_1 === 0) {
      return Unit_instance;
    }
    this.m1m(numberToChar(HexConverter_getInstance().o1l(this.d1l_1, 0, this.c1l_1).y()));
    this.c1l_1 = 0;
  };
  protoOf(TokenStream).k1m = function (c) {
    var tmp1 = this.c1l_1;
    this.c1l_1 = tmp1 + 1 | 0;
    this.d1l_1[tmp1] = c;
    if (this.c1l_1 === 4) {
      this.l1m();
    }
  };
  protoOf(TokenStream).i1m = function (token) {
    this.e1l_1.z3(token);
  };
  protoOf(TokenStream).x1m = function (string) {
    this.e1l_1.z3(string);
  };
  protoOf(TokenStream).y1m = function (stopOnComma) {
    var reuse = this.e1l_1.z1m();
    if (!(reuse == null)) {
      var tmp;
      if (!(reuse == null) ? typeof reuse === 'string' : false) {
        this.z1k_1 = reuse;
        tmp = Token_STRING_getInstance();
      } else {
        tmp = reuse instanceof Token ? reuse : THROW_CCE();
      }
      return tmp;
    }
    this.b1l_1 = false;
    this.y1k_1 = 0;
    // Inline function 'net.mamoe.yamlkt.internal.whileNotEOF' call
    // Inline function 'kotlin.contracts.contract' call
    $l$loop: while (true) {
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (!!(this.w1k_1 === this.v1k_1.length)) {
        break $l$loop;
      }
      var tmp1 = this.w1k_1;
      this.w1k_1 = tmp1 + 1 | 0;
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.nextToken.<anonymous>' call
      var char = charSequenceGet(this.v1k_1, tmp1);
      if (char === _Char___init__impl__6a9atx(32)) {
        this.x1k_1 = this.x1k_1 + 1 | 0;
        this.y1k_1 = this.y1k_1 + 1 | 0;
      } else {
        if (char === _Char___init__impl__6a9atx(58)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_COLON_getInstance();
        } else if (char === _Char___init__impl__6a9atx(10) ? true : char === _Char___init__impl__6a9atx(13)) {
          this.b1l_1 = true;
          this.x1k_1 = 0;
          this.y1k_1 = 0;
        } else if (char === _Char___init__impl__6a9atx(44)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_COMMA_getInstance();
        } else if (char === _Char___init__impl__6a9atx(123)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_MAP_BEGIN_getInstance();
        } else if (char === _Char___init__impl__6a9atx(125)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_MAP_END_getInstance();
        } else if (char === _Char___init__impl__6a9atx(91)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_LIST_BEGIN_getInstance();
        } else if (char === _Char___init__impl__6a9atx(93)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_LIST_END_getInstance();
        } else if (char === _Char___init__impl__6a9atx(45)) {
          this.x1k_1 = this.x1k_1 + 1 | 0;
          return Token_MULTILINE_LIST_FLAG_getInstance();
        } else if (char === _Char___init__impl__6a9atx(35)) {
          skipLine(this);
          this.x1k_1 = 0;
        } else {
          var tmp19_elvis_lhs = prepareStringAndNextToken(this, stopOnComma, char);
          var tmp_0;
          if (tmp19_elvis_lhs == null) {
            return Token_STRING_NULL_getInstance();
          } else {
            tmp_0 = tmp19_elvis_lhs;
          }
          var str = tmp_0;
          this.z1k_1 = str;
          return Token_STRING_getInstance();
        }
      }
    }
    return null;
  };
  function incStringBuf($this) {
    $this.d1m_1 = copyOf($this.d1m_1, $this.d1m_1.length + ($this.d1m_1.length >>> 1 | 0) | 0);
  }
  function StringBufHolder() {
    this.d1m_1 = charArray(32);
    this.e1m_1 = 0;
  }
  protoOf(StringBufHolder).j1m = function () {
    // Inline function 'kotlin.also' call
    var this_0 = concatToString(this.d1m_1, 0, 0 + this.e1m_1 | 0);
    // Inline function 'net.mamoe.yamlkt.internal.StringBufHolder.takeStringBuf.<anonymous>' call
    this.e1m_1 = 0;
    return this_0;
  };
  protoOf(StringBufHolder).g1m = function () {
    var inductionVariable = this.e1m_1 - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        if (!(this.d1m_1[i] === _Char___init__impl__6a9atx(32))) {
          this.e1m_1 = 0;
          return concatToString(this.d1m_1, 0, 0 + (i + 1 | 0) | 0);
        }
      }
       while (0 <= inductionVariable);
    return '';
  };
  protoOf(StringBufHolder).m1m = function (c) {
    if (this.e1m_1 === this.d1m_1.length) {
      incStringBuf(this);
    }
    var tmp = this.d1m_1;
    var tmp1 = this.e1m_1;
    this.e1m_1 = tmp1 + 1 | 0;
    tmp[tmp1] = c;
  };
  protoOf(StringBufHolder).f1m = function (source, startIndex, endIndex) {
    var length = endIndex - startIndex | 0;
    var requiredSize = (this.e1m_1 + length | 0) + 1 | 0;
    while (this.d1m_1.length < requiredSize) {
      incStringBuf(this);
    }
    var inductionVariable = 0;
    if (inductionVariable <= length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = this.d1m_1;
        var tmp2 = this.e1m_1;
        this.e1m_1 = tmp2 + 1 | 0;
        tmp[tmp2] = charSequenceGet(source, startIndex + i | 0);
      }
       while (!(i === length));
  };
  function Stack() {
    this.u1m_1 = 0;
    this.v1m_1 = 64;
    var tmp = this;
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.v1m_1;
    tmp.w1m_1 = fillArrayVal(Array(size), null);
  }
  protoOf(Stack).a1n = function () {
    // Inline function 'kotlin.let' call
    // Inline function 'net.mamoe.yamlkt.internal.Stack.increase.<anonymous>' call
    var it = this.w1m_1.length;
    var new_0 = it + (it >> 1) | 0;
    this.v1m_1 = new_0;
    this.w1m_1 = copyOf_0(this.w1m_1, this.v1m_1);
  };
  protoOf(Stack).z3 = function (value) {
    if (this.u1m_1 === this.v1m_1) {
      this.a1n();
    }
    var tmp = this.w1m_1;
    var tmp1 = this.u1m_1;
    this.u1m_1 = tmp1 + 1 | 0;
    tmp[tmp1] = value;
  };
  protoOf(Stack).z1m = function () {
    if (this.u1m_1 === 0) {
      return null;
    }
    var tmp = this.w1m_1;
    this.u1m_1 = this.u1m_1 - 1 | 0;
    var tmp_0 = tmp[this.u1m_1];
    return (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
  };
  function Token_COMMA_getInstance() {
    Token_initEntries();
    return Token_COMMA_instance;
  }
  function Token_COLON_getInstance() {
    Token_initEntries();
    return Token_COLON_instance;
  }
  function Token_MULTILINE_LIST_FLAG_getInstance() {
    Token_initEntries();
    return Token_MULTILINE_LIST_FLAG_instance;
  }
  function Token_LIST_BEGIN_getInstance() {
    Token_initEntries();
    return Token_LIST_BEGIN_instance;
  }
  function Token_LIST_END_getInstance() {
    Token_initEntries();
    return Token_LIST_END_instance;
  }
  function Token_MAP_BEGIN_getInstance() {
    Token_initEntries();
    return Token_MAP_BEGIN_instance;
  }
  function Token_MAP_END_getInstance() {
    Token_initEntries();
    return Token_MAP_END_instance;
  }
  function Token_STRING_getInstance() {
    Token_initEntries();
    return Token_STRING_instance;
  }
  function Token_STRING_NULL_getInstance() {
    Token_initEntries();
    return Token_STRING_NULL_instance;
  }
  var properties_initialized_TokenStream_kt_oy78mh;
  function _init_properties_TokenStream_kt__kxgpy1() {
    if (!properties_initialized_TokenStream_kt_oy78mh) {
      properties_initialized_TokenStream_kt_oy78mh = true;
      // Inline function 'kotlin.run' call
      // Inline function 'net.mamoe.yamlkt.internal.__values__init.<anonymous>' call
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var all = [Token_COMMA_getInstance(), Token_COLON_getInstance(), Token_LIST_END_getInstance(), Token_LIST_BEGIN_getInstance(), Token_MAP_END_getInstance(), Token_MAP_BEGIN_getInstance(), Token_MULTILINE_LIST_FLAG_getInstance()];
      // Inline function 'kotlin.collections.maxOf' call
      // Inline function 'kotlin.collections.isEmpty' call
      if (all.length === 0)
        throw NoSuchElementException_init_$Create$();
      // Inline function 'net.mamoe.yamlkt.internal.__values__init.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.code' call
      var this_0 = all[0].t1m_1;
      var maxValue = Char__toInt_impl_vasixd(this_0);
      var inductionVariable = 1;
      var last = get_lastIndex(all);
      if (inductionVariable <= last)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'net.mamoe.yamlkt.internal.__values__init.<anonymous>.<anonymous>' call
          // Inline function 'kotlin.code' call
          var this_1 = all[i].t1m_1;
          var v = Char__toInt_impl_vasixd(this_1);
          if (compareTo(maxValue, v) < 0) {
            maxValue = v;
          }
        }
         while (!(i === last));
      // Inline function 'kotlin.arrayOfNulls' call
      var size = maxValue + 1 | 0;
      // Inline function 'kotlin.apply' call
      var this_2 = fillArrayVal(Array(size), null);
      // Inline function 'net.mamoe.yamlkt.internal.__values__init.<anonymous>.<anonymous>' call
      var inductionVariable_0 = 0;
      var last_0 = all.length;
      while (inductionVariable_0 < last_0) {
        var tokenClass = all[inductionVariable_0];
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        // Inline function 'kotlin.code' call
        var this_3 = tokenClass.t1m_1;
        this_2[Char__toInt_impl_vasixd(this_3)] = tokenClass;
      }
      __values__init = this_2;
    }
  }
  var Kind_FLOW_CLASS_instance;
  var Kind_FLOW_MAP_instance;
  var Kind_FLOW_SEQUENCE_instance;
  var Kind_STRING_instance;
  var Kind_NULL_STRING_instance;
  var Kind_BLOCK_CLASS_instance;
  var Kind_BLOCK_MAP_instance;
  var Kind_BLOCK_SEQUENCE_instance;
  var Kind_EMPTY_CLASS_instance;
  var Kind_entriesInitialized;
  function Kind_initEntries() {
    if (Kind_entriesInitialized)
      return Unit_instance;
    Kind_entriesInitialized = true;
    Kind_FLOW_CLASS_instance = new Kind('FLOW_CLASS', 0);
    Kind_FLOW_MAP_instance = new Kind('FLOW_MAP', 1);
    Kind_FLOW_SEQUENCE_instance = new Kind('FLOW_SEQUENCE', 2);
    Kind_STRING_instance = new Kind('STRING', 3);
    Kind_NULL_STRING_instance = new Kind('NULL_STRING', 4);
    Kind_BLOCK_CLASS_instance = new Kind('BLOCK_CLASS', 5);
    Kind_BLOCK_MAP_instance = new Kind('BLOCK_MAP', 6);
    Kind_BLOCK_SEQUENCE_instance = new Kind('BLOCK_SEQUENCE', 7);
    Kind_EMPTY_CLASS_instance = new Kind('EMPTY_CLASS', 8);
  }
  function handlePossibleNegativeValues($this, current) {
    if ($this.f1n_1.g1n($this.f1n_1.g1l_1)) {
      $this.f1n_1.g1l_1.x1m(readUnquotedString($this.f1n_1.g1l_1, true, _Char___init__impl__6a9atx(45)));
      return Unit_instance;
    }
    var tmp0_elvis_lhs = $this.h1n($this.f1n_1.g1l_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint = 'Unexpected end of text';
      var tmp0 = $this.m1l();
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_0 = $this.q1k_1 + ': ' + hint;
      throw contextualDecodingException(tmp0.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var next = tmp;
    if (next.z1_1 === 7) {
      $this.f1n_1.g1l_1.i1m(next);
      $this.f1n_1.g1l_1.z1k_1 = '-' + $this.f1n_1.g1l_1.z1k_1;
    } else {
      $this.f1n_1.g1l_1.i1m(current);
    }
  }
  function Kind(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function AbstractDecoder($outer, name) {
    this.s1k_1 = $outer;
    this.q1k_1 = name;
    this.r1k_1 = false;
  }
  protoOf(AbstractDecoder).m1l = function () {
    return this.s1k_1;
  };
  protoOf(AbstractDecoder).h1n = function (_this__u8e3s4) {
    return _this__u8e3s4.y1m(this.i1n());
  };
  protoOf(AbstractDecoder).g1i = function (descriptor) {
    if (this.r1k_1) {
      this.r1k_1 = false;
      return this;
    }
    return this.s1k_1.j1n(this, descriptor);
  };
  protoOf(AbstractDecoder).p1g = function (descriptor) {
    Debugging_getInstance().c1m();
  };
  protoOf(AbstractDecoder).t1g = function (descriptor, index, deserializer, previousValue) {
    // Inline function 'kotlin.runCatching' call
    var tmp;
    try {
      // Inline function 'net.mamoe.yamlkt.internal.AbstractDecoder.decodeSerializableElement.<anonymous>' call
      // Inline function 'kotlin.Companion.success' call
      var value = deserializer.l1f(this);
      tmp = _Result___init__impl__xyqfz8(value);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        // Inline function 'kotlin.Companion.failure' call
        tmp_0 = _Result___init__impl__xyqfz8(createFailure(e));
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    // Inline function 'kotlin.getOrElse' call
    var this_0 = tmp;
    var exception = Result__exceptionOrNull_impl_p6xea9(this_0);
    var tmp_1;
    if (exception == null) {
      var tmp_2 = _Result___get_value__impl__bjfvqg(this_0);
      tmp_1 = (tmp_2 == null ? true : !(tmp_2 == null)) ? tmp_2 : THROW_CCE();
    } else {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint = 'deserializing nested class';
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var this_1 = this.m1l();
      throw contextualDecodingException(this_1.g1l_1, 'Top-level decoder: ' + hint, descriptor, index, exception);
    }
    return tmp_1;
  };
  function IndentedDecoder($outer, baseIndent, name) {
    this.b1m_1 = $outer;
    AbstractDecoder.call(this, $outer, name);
    this.a1m_1 = baseIndent;
    // Inline function 'kotlin.check' call
    if (!(this.a1m_1 >= 0)) {
      // Inline function 'net.mamoe.yamlkt.internal.IndentedDecoder.<anonymous>' call
      var message = 'baseIndent must be >= 0';
      throw IllegalStateException_init_$Create$(toString(message));
    }
  }
  protoOf(IndentedDecoder).k1n = function (newIndent) {
    if (newIndent > this.a1m_1) {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint = 'bad indentation, baseIndent=' + this.a1m_1 + ', newIndent=' + newIndent;
      var tmp0 = this.m1l();
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_0 = this.q1k_1 + ': ' + hint;
      throw contextualDecodingException(tmp0.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
    }
    return this.a1m_1 <= newIndent;
  };
  function EmptyClassDecoder($outer) {
    this.o1n_1 = $outer;
    AbstractDecoder.call(this, $outer, 'Yaml Empty Class');
  }
  protoOf(EmptyClassDecoder).n1g = function () {
    return Kind_EMPTY_CLASS_getInstance();
  };
  protoOf(EmptyClassDecoder).i1n = function () {
    var message = "shouldn't be called";
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(EmptyClassDecoder).q1g = function () {
    return false;
  };
  protoOf(EmptyClassDecoder).r1g = function (descriptor) {
    // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
    return -1;
  };
  function BlockClassDecoder($outer, baseIndent) {
    this.u1n_1 = $outer;
    IndentedDecoder.call(this, $outer, baseIndent, 'Yaml Block Class');
  }
  protoOf(BlockClassDecoder).i1n = function () {
    return false;
  };
  protoOf(BlockClassDecoder).q1g = function () {
    return false;
  };
  protoOf(BlockClassDecoder).n1g = function () {
    return Kind_BLOCK_CLASS_getInstance();
  };
  protoOf(BlockClassDecoder).r1g = function (descriptor) {
    var token = this.h1n(this.u1n_1.g1l_1);
    switch (token == null ? -1 : token.z1_1) {
      case -1:
        // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call

        return -1;
      case 7:
        if (this.u1n_1.g1l_1.x1k_1 < this.a1m_1) {
          this.u1n_1.g1l_1.x1m(ensureNotNull(this.u1n_1.g1l_1.z1k_1));
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        }

        if (!this.k1n(this.u1n_1.g1l_1.x1k_1)) {
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        }

        var index = descriptor.o1g(ensureNotNull(this.u1n_1.g1l_1.z1k_1));
        var current = this.h1n(this.u1n_1.g1l_1);
        if (!equals(current, Token_COLON_getInstance())) {
          var tmp0 = this.u1n_1.g1l_1;
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
          var hint = 'There must be a COLON between class key and value but found ' + toString_1(current) + " for '" + descriptor.m1g() + "'";
          throw contextualDecodingException(tmp0, hint, null, -1);
        }

        var tmp;
        if (!(index === -3)) {
          tmp = index;
        } else {
          YamlNullableDynamicSerializer_getInstance().l1f(this);
          tmp = this.r1g(descriptor);
        }

        return tmp;
      default:
        this.u1n_1.g1l_1.i1m(token);
        // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call

        return -1;
    }
  };
  function BlockMapDecoder($outer, baseIndent) {
    this.b1o_1 = $outer;
    IndentedDecoder.call(this, $outer, baseIndent, 'Yaml Block Map');
    this.a1o_1 = 0;
  }
  protoOf(BlockMapDecoder).i1n = function () {
    return false;
  };
  protoOf(BlockMapDecoder).n1g = function () {
    return Kind_BLOCK_MAP_getInstance();
  };
  protoOf(BlockMapDecoder).r1g = function (descriptor) {
    // Inline function 'net.mamoe.yamlkt.internal.isOdd' call
    if (!((this.a1o_1 & 1) === 0)) {
      var tmp1 = this.a1o_1;
      this.a1o_1 = tmp1 + 1 | 0;
      return tmp1;
    }
    var token = this.h1n(this.b1o_1.g1l_1);
    var tmp0 = token == null ? -1 : token.z1_1;
    // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
    if (equals(token, null)) {
      // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
      return -1;
    } else {
      if (tmp0 === 7) {
        if (this.b1o_1.g1l_1.x1k_1 < this.a1m_1) {
          var tmp1_0 = Debugging_getInstance();
          $l$block: {
            // Inline function 'net.mamoe.yamlkt.internal.Debugging.logCustom' call
            if (!tmp1_0.t1l()) {
              break $l$block;
            }
            var tmp = access$space(tmp1_0, tmp1_0.v1l());
            // Inline function 'net.mamoe.yamlkt.internal.BlockMapDecoder.decodeElementIndex.<anonymous>' call
            var tmp$ret$4 = 'BlockMapDecoder exit: crt=' + this.b1o_1.g1l_1.x1k_1 + ', base=' + this.a1m_1;
            println(tmp + tmp$ret$4);
          }
          this.b1o_1.g1l_1.x1m(ensureNotNull(this.b1o_1.g1l_1.z1k_1));
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        }
        if (!this.k1n(this.b1o_1.g1l_1.x1k_1)) {
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        }
        var current = this.h1n(this.b1o_1.g1l_1);
        if (!equals(current, Token_COLON_getInstance())) {
          var tmp2 = this.b1o_1.g1l_1;
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
          var hint = 'There must be a COLON between map key and value but found ' + toString_1(current) + " for '" + descriptor.m1g() + "'";
          throw contextualDecodingException(tmp2, hint, null, -1);
        } else {
          // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
          var this_0 = this.b1o_1.g1l_1;
          if (!(this_0.w1k_1 === this_0.v1k_1.length)) {
            var char = charSequenceGet(this.b1o_1.g1l_1.v1k_1, this.b1o_1.g1l_1.w1k_1);
            if (!isWhitespace(char)) {
              var tmp5 = this.b1o_1.g1l_1;
              // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
              var hint_0 = 'Expected whitespace after COLON but found ' + toString_0(char) + " for '" + descriptor.m1g() + "'";
              throw contextualDecodingException(tmp5, hint_0, null, -1);
            }
          }
        }
        this.b1o_1.g1l_1.x1m(ensureNotNull(this.b1o_1.g1l_1.z1k_1));
        var tmp3 = this.a1o_1;
        this.a1o_1 = tmp3 + 1 | 0;
        return tmp3;
      } else {
        this.b1o_1.g1l_1.i1m(token);
        // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
        return -1;
      }
    }
  };
  function FlowMapDecoder($outer) {
    this.h1o_1 = $outer;
    AbstractDecoder.call(this, $outer, 'Yaml Flow Map');
    this.f1o_1 = null;
    this.g1o_1 = 0;
  }
  protoOf(FlowMapDecoder).i1n = function () {
    return true;
  };
  protoOf(FlowMapDecoder).n1g = function () {
    return Kind_FLOW_MAP_getInstance();
  };
  protoOf(FlowMapDecoder).q1g = function () {
    return false;
  };
  protoOf(FlowMapDecoder).r1g = function (descriptor) {
    // Inline function 'net.mamoe.yamlkt.internal.isOdd' call
    if (!((this.g1o_1 & 1) === 0)) {
      var tmp1 = this.g1o_1;
      this.g1o_1 = tmp1 + 1 | 0;
      return tmp1;
    }
    if (this.g1o_1 > 1) {
      var token = this.h1n(this.h1o_1.g1l_1);
      var tmp0 = token == null ? -1 : token.z1_1;
      // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
      if (equals(token, null)) {
        // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
        var hint = "Early EOF. Expected '}'.";
        var tmp0_0 = this.m1l();
        // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
        var hint_0 = this.q1k_1 + ': ' + hint;
        throw contextualDecodingException(tmp0_0.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
      } else {
        if (tmp0 === 6) {
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        } else {
          if (tmp0 !== 0) {
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_1 = 'There must be a COMMA between flow map entries but found ' + toString_1(token) + " for '" + descriptor.m1g() + "'";
            var tmp0_1 = this.m1l();
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_2 = this.q1k_1 + ': ' + hint_1;
            throw contextualDecodingException(tmp0_1.g1l_1, 'Top-level decoder: ' + hint_2, null, -1, null);
          }
        }
      }
    }
    var token_0 = this.h1n(this.h1o_1.g1l_1);
    var tmp0_2 = token_0 == null ? -1 : token_0.z1_1;
    var tmp;
    // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
    if (equals(token_0, null)) {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_3 = "Early EOF. Expected '}'.";
      var tmp0_3 = this.m1l();
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_4 = this.q1k_1 + ': ' + hint_3;
      throw contextualDecodingException(tmp0_3.g1l_1, 'Top-level decoder: ' + hint_4, null, -1, null);
    } else {
      if (tmp0_2 === 7) {
        var next = this.h1n(this.h1o_1.g1l_1);
        switch (next == null ? -1 : next.z1_1) {
          case 1:
            this.h1o_1.g1l_1.x1m(ensureNotNull(this.h1o_1.g1l_1.z1k_1));
            break;
          case 0:
          case 6:
            this.h1o_1.g1l_1.i1m(next);
            this.h1o_1.g1l_1.i1m(Token_STRING_NULL_getInstance());
            this.h1o_1.g1l_1.x1m(ensureNotNull(this.h1o_1.g1l_1.z1k_1));
            break;
          default:
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

            var hint_5 = 'Illegal token ' + toString_1(token_0);
            var tmp0_4 = this.m1l();
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

            var hint_6 = this.q1k_1 + ': ' + hint_5;
            throw contextualDecodingException(tmp0_4.g1l_1, 'Top-level decoder: ' + hint_6, null, -1, null);
        }
        var tmp3 = this.g1o_1;
        this.g1o_1 = tmp3 + 1 | 0;
        tmp = tmp3;
      } else {
        if (tmp0_2 === 6) {
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          tmp = -1;
        } else {
          if (tmp0_2 === 0) {
            this.h1o_1.g1l_1.i1m(Token_STRING_NULL_getInstance());
            this.h1o_1.g1l_1.i1m(Token_STRING_NULL_getInstance());
            var tmp5 = this.g1o_1;
            this.g1o_1 = tmp5 + 1 | 0;
            tmp = tmp5;
          } else {
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_7 = 'Illegal token ' + toString_1(token_0);
            var tmp0_5 = this.m1l();
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_8 = this.q1k_1 + ': ' + hint_7;
            throw contextualDecodingException(tmp0_5.g1l_1, 'Top-level decoder: ' + hint_8, null, -1, null);
          }
        }
      }
    }
    return tmp;
  };
  function FlowClassDecoder($outer) {
    this.n1o_1 = $outer;
    AbstractDecoder.call(this, $outer, 'Yaml Flow Class');
    this.l1o_1 = -5;
    this.m1o_1 = false;
  }
  protoOf(FlowClassDecoder).i1n = function () {
    return true;
  };
  protoOf(FlowClassDecoder).n1g = function () {
    return Kind_FLOW_CLASS_getInstance();
  };
  protoOf(FlowClassDecoder).q1g = function () {
    return false;
  };
  protoOf(FlowClassDecoder).r1g = function (descriptor) {
    if (this.m1o_1) {
      var token = this.h1n(this.n1o_1.g1l_1);
      var tmp0 = token == null ? -1 : token.z1_1;
      // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
      if (equals(token, null)) {
        // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
        var hint = "Early EOF. Expected '}'.";
        var tmp0_0 = this.m1l();
        // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
        var hint_0 = this.q1k_1 + ': ' + hint;
        throw contextualDecodingException(tmp0_0.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
      } else {
        if (tmp0 === 6) {
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        } else {
          if (tmp0 !== 0) {
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_1 = 'There must be a COMMA between flow map entries but found ' + toString_1(token) + " for '" + descriptor.m1g() + "'";
            var tmp0_1 = this.m1l();
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_2 = this.q1k_1 + ': ' + hint_1;
            throw contextualDecodingException(tmp0_1.g1l_1, 'Top-level decoder: ' + hint_2, null, -1, null);
          }
        }
      }
    } else {
      this.m1o_1 = true;
    }
    var token_0 = this.h1n(this.n1o_1.g1l_1);
    var tmp0_2 = token_0 == null ? -1 : token_0.z1_1;
    var tmp;
    // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
    if (equals(token_0, null)) {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_3 = "Early EOF. Expected '}'.";
      var tmp0_3 = this.m1l();
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_4 = this.q1k_1 + ': ' + hint_3;
      throw contextualDecodingException(tmp0_3.g1l_1, 'Top-level decoder: ' + hint_4, null, -1, null);
    } else {
      if (tmp0_2 === 6) {
        // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
        tmp = -1;
      } else {
        if (tmp0_2 === 0) {
          return this.r1g(descriptor);
        } else {
          if (tmp0_2 === 7) {
            var next = this.h1n(this.n1o_1.g1l_1);
            if (!equals(next, Token_COLON_getInstance())) {
              // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
              var hint_5 = 'Expected a COLON between flow map entries but found ' + toString_1(next) + " for '" + descriptor.m1g() + "'";
              var tmp0_4 = this.m1l();
              // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
              var hint_6 = this.q1k_1 + ': ' + hint_5;
              throw contextualDecodingException(tmp0_4.g1l_1, 'Top-level decoder: ' + hint_6, null, -1, null);
            }
            var index = descriptor.o1g(ensureNotNull(this.n1o_1.g1l_1.z1k_1));
            var tmp_0;
            if (!(index === -3)) {
              this.l1o_1 = index;
              tmp_0 = index;
            } else {
              this.l1o_1 = -1;
              YamlNullableDynamicSerializer_getInstance().l1f(this);
              return this.r1g(descriptor);
            }
            tmp = tmp_0;
          } else {
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_7 = 'Illegal token ' + toString_1(token_0) + " for '" + descriptor.m1g() + "'";
            var tmp0_5 = this.m1l();
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_8 = this.q1k_1 + ': ' + hint_7;
            throw contextualDecodingException(tmp0_5.g1l_1, 'Top-level decoder: ' + hint_8, null, -1, null);
          }
        }
      }
    }
    return tmp;
  };
  function FlowSequenceDecoder($outer) {
    this.f1n_1 = $outer;
    AbstractDecoder.call(this, $outer, 'Yaml Flow Sequence');
    this.e1n_1 = 0;
  }
  protoOf(FlowSequenceDecoder).i1n = function () {
    return true;
  };
  protoOf(FlowSequenceDecoder).q1g = function () {
    return false;
  };
  protoOf(FlowSequenceDecoder).n1g = function () {
    return Kind_FLOW_SEQUENCE_getInstance();
  };
  protoOf(FlowSequenceDecoder).r1g = function (descriptor) {
    var current = this.h1n(this.f1n_1.g1l_1);
    var tmp0 = current == null ? -1 : current.z1_1;
    // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
    if (equals(current, null)) {
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint = 'Unexpected EOF';
      var tmp0_0 = this.m1l();
      // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
      var hint_0 = this.q1k_1 + ': ' + hint;
      throw contextualDecodingException(tmp0_0.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
    } else {
      if (tmp0 === 7) {
        var originString = ensureNotNull(this.f1n_1.g1l_1.z1k_1);
        var next = this.h1n(this.f1n_1.g1l_1);
        switch (next == null ? -1 : next.z1_1) {
          case 0:
            this.f1n_1.g1l_1.x1m(originString);
            break;
          case 4:
            this.f1n_1.g1l_1.i1m(next);
            this.f1n_1.g1l_1.x1m(originString);
            break;
          default:
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

            var hint_1 = 'Illegal token ' + toString_1(next);
            var tmp0_1 = this.m1l();
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

            var hint_2 = this.q1k_1 + ': ' + hint_1;
            throw contextualDecodingException(tmp0_1.g1l_1, 'Top-level decoder: ' + hint_2, null, -1, null);
        }
      } else {
        if (tmp0 === 4) {
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        } else {
          if (tmp0 === 0) {
            var next_0 = this.h1n(this.f1n_1.g1l_1);
            switch (next_0 == null ? -1 : next_0.z1_1) {
              case 4:
                // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call

                return -1;
              case 3:
              case 5:
                this.f1n_1.g1l_1.i1m(next_0);
                break;
              case 8:
              case 7:
                this.f1n_1.g1l_1.i1m(next_0);
                break;
              case 2:
                handlePossibleNegativeValues(this, current);
                var tmp1 = this.e1n_1;
                this.e1n_1 = tmp1 + 1 | 0;
                return tmp1;
              default:
                // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

                var hint_3 = 'Illegal token ' + toString_1(next_0);
                var tmp0_2 = this.m1l();
                // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

                var hint_4 = this.q1k_1 + ': ' + hint_3;
                throw contextualDecodingException(tmp0_2.g1l_1, 'Top-level decoder: ' + hint_4, null, -1, null);
            }
          } else {
            switch (tmp0) {
              case 3:
              case 5:
                this.f1n_1.g1l_1.i1m(current);
                var tmp3 = this.e1n_1;
                this.e1n_1 = tmp3 + 1 | 0;
                return tmp3;
              default:
                if (tmp0 === 2) {
                  handlePossibleNegativeValues(this, current);
                  var tmp5 = this.e1n_1;
                  this.e1n_1 = tmp5 + 1 | 0;
                  return tmp5;
                } else {
                  // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
                  var hint_5 = 'Illegal token ' + toString_1(current);
                  var tmp0_3 = this.m1l();
                  // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
                  var hint_6 = this.q1k_1 + ': ' + hint_5;
                  throw contextualDecodingException(tmp0_3.g1l_1, 'Top-level decoder: ' + hint_6, null, -1, null);
                }

            }
          }
        }
      }
    }
    var tmp7 = this.e1n_1;
    this.e1n_1 = tmp7 + 1 | 0;
    return tmp7;
  };
  function BlockSequenceDecoder($outer, baseIndent) {
    this.u1o_1 = $outer;
    IndentedDecoder.call(this, $outer, baseIndent, 'Yaml Block Sequence');
    this.t1o_1 = 0;
  }
  protoOf(BlockSequenceDecoder).i1n = function () {
    return false;
  };
  protoOf(BlockSequenceDecoder).q1g = function () {
    return false;
  };
  protoOf(BlockSequenceDecoder).n1g = function () {
    return Kind_BLOCK_SEQUENCE_getInstance();
  };
  protoOf(BlockSequenceDecoder).k1n = function (newIndent) {
    return this.a1m_1 <= newIndent;
  };
  protoOf(BlockSequenceDecoder).r1g = function (descriptor) {
    if (this.t1o_1 === 0) {
      var token = this.h1n(this.u1o_1.g1l_1);
      // Inline function 'kotlin.check' call
      if (!equals(token, Token_MULTILINE_LIST_FLAG_getInstance())) {
        // Inline function 'net.mamoe.yamlkt.internal.BlockSequenceDecoder.decodeElementIndex.<anonymous>' call
        var message = "The beginning token must be '-' but found " + toString_1(token);
        throw IllegalStateException_init_$Create$(toString(message));
      }
      var tmp1 = this.t1o_1;
      this.t1o_1 = tmp1 + 1 | 0;
      return tmp1;
    }
    var token_0 = this.h1n(this.u1o_1.g1l_1);
    var tmp0 = token_0 == null ? -1 : token_0.z1_1;
    // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
    if (equals(token_0, null)) {
      // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
      return -1;
    } else {
      if (tmp0 === 2) {
        var tmp;
        if (this.k1n(this.u1o_1.g1l_1.x1k_1)) {
          var tmp3 = this.t1o_1;
          this.t1o_1 = tmp3 + 1 | 0;
          tmp = tmp3;
        } else {
          this.u1o_1.g1l_1.i1m(token_0);
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          tmp = -1;
        }
        return tmp;
      } else {
        if (tmp0 === 7) {
          this.u1o_1.g1l_1.x1m(ensureNotNull(this.u1o_1.g1l_1.z1k_1));
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        } else {
          this.u1o_1.g1l_1.i1m(token_0);
          // Inline function 'net.mamoe.yamlkt.internal.READ_DONE' call
          return -1;
        }
      }
    }
  };
  function YamlStringDecoder($outer) {
    this.y1o_1 = $outer;
    AbstractDecoder.call(this, $outer, 'Yaml Literal');
  }
  protoOf(YamlStringDecoder).i1n = function () {
    return false;
  };
  protoOf(YamlStringDecoder).n1g = function () {
    return Kind_STRING_getInstance();
  };
  protoOf(YamlStringDecoder).r1g = function (descriptor) {
    var message = "shouldn't be called";
    throw IllegalStateException_init_$Create$(toString(message));
  };
  function YamlNullStringDecoder($outer) {
    this.c1p_1 = $outer;
    AbstractDecoder.call(this, $outer, 'Yaml Null');
  }
  protoOf(YamlNullStringDecoder).r1g = function (descriptor) {
    var message = "shouldn't be called";
    throw IllegalStateException_init_$Create$(toString(message));
  };
  protoOf(YamlNullStringDecoder).n1g = function () {
    return Kind_NULL_STRING_getInstance();
  };
  protoOf(YamlNullStringDecoder).i1n = function () {
    var message = "shouldn't be called";
    throw IllegalStateException_init_$Create$(toString(message));
  };
  function Companion_0() {
    this.d1p_1 = 'unexpected null value, you may enable `nonStrictNullability`';
  }
  var Companion_instance_1;
  function Companion_getInstance_0() {
    return Companion_instance_1;
  }
  function beginStructureImpl$nextToken($parentDecoder, this$0) {
    var tmp;
    if ($parentDecoder == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.run' call
      // Inline function 'net.mamoe.yamlkt.internal.YamlDecoder.beginStructureImpl.nextToken.<anonymous>' call
      tmp = $parentDecoder.h1n(this$0.g1l_1);
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? this$0.g1l_1.y1m(false) : tmp1_elvis_lhs;
  }
  function Kind_FLOW_CLASS_getInstance() {
    Kind_initEntries();
    return Kind_FLOW_CLASS_instance;
  }
  function Kind_FLOW_MAP_getInstance() {
    Kind_initEntries();
    return Kind_FLOW_MAP_instance;
  }
  function Kind_FLOW_SEQUENCE_getInstance() {
    Kind_initEntries();
    return Kind_FLOW_SEQUENCE_instance;
  }
  function Kind_STRING_getInstance() {
    Kind_initEntries();
    return Kind_STRING_instance;
  }
  function Kind_NULL_STRING_getInstance() {
    Kind_initEntries();
    return Kind_NULL_STRING_instance;
  }
  function Kind_BLOCK_CLASS_getInstance() {
    Kind_initEntries();
    return Kind_BLOCK_CLASS_instance;
  }
  function Kind_BLOCK_MAP_getInstance() {
    Kind_initEntries();
    return Kind_BLOCK_MAP_instance;
  }
  function Kind_BLOCK_SEQUENCE_getInstance() {
    Kind_initEntries();
    return Kind_BLOCK_SEQUENCE_instance;
  }
  function Kind_EMPTY_CLASS_getInstance() {
    Kind_initEntries();
    return Kind_EMPTY_CLASS_instance;
  }
  function YamlDecoder(configuration, tokenStream, serializersModule) {
    this.f1l_1 = configuration;
    this.g1l_1 = tokenStream;
    this.h1l_1 = serializersModule;
    this.i1l_1 = new InlineDecoder(this);
    this.j1l_1 = new EmptyClassDecoder(this);
    this.k1l_1 = new YamlStringDecoder(this);
    this.l1l_1 = new YamlNullStringDecoder(this);
  }
  protoOf(YamlDecoder).g1n = function (_this__u8e3s4) {
    $l$block: {
      // Inline function 'net.mamoe.yamlkt.internal.peekNext' call
      // Inline function 'net.mamoe.yamlkt.internal.TokenStream.endOfInput' call
      if (_this__u8e3s4.w1k_1 === _this__u8e3s4.v1k_1.length) {
        break $l$block;
      }
      // Inline function 'kotlin.let' call
      var it = charSequenceGet(_this__u8e3s4.v1k_1, _this__u8e3s4.w1k_1 + 1 | 0);
      var tmp;
      if (!isWhitespace(it)) {
        var tmp_0;
        if (it === _Char___init__impl__6a9atx(45)) {
          tmp_0 = true;
        } else {
          // Inline function 'net.mamoe.yamlkt.internal.Companion.get' call
          var this_0 = Companion_getInstance();
          var tmp_1;
          if (Char__compareTo_impl_ypi4mb(it, access$_get_valuesLastIndex__pbgabb(this_0)) > 0) {
            tmp_1 = null;
          } else {
            // Inline function 'kotlin.code' call
            var tmp$ret$2 = Char__toInt_impl_vasixd(it);
            tmp_1 = this_0.p1m_1[tmp$ret$2];
          }
          tmp_0 = tmp_1 == null;
        }
        tmp = tmp_0;
      } else {
        tmp = false;
      }
      if (tmp) {
        return true;
      }
    }
    return false;
  };
  protoOf(YamlDecoder).g1i = function (descriptor) {
    return this.j1n(null, descriptor);
  };
  protoOf(YamlDecoder).j1n = function (parentDecoder, descriptor) {
    Debugging_getInstance().w1l(descriptor, parentDecoder);
    var tmp0_subject = descriptor.n1g();
    if (equals(tmp0_subject, LIST_getInstance())) {
      var token = this.g1l_1.y1m(false);
      var tmp;
      switch (token == null ? -1 : token.z1_1) {
        case -1:
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

          var hint = 'Early EOF';
          throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint, null, -1, null);
        case 3:
          tmp = new FlowSequenceDecoder(this);
          break;
        case 2:
          this.g1l_1.i1m(token);
          tmp = new BlockSequenceDecoder(this, this.g1l_1.x1k_1);
          break;
        default:
          // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call

          var hint_0 = 'expected list(sequence), but found ' + toString_1(token);
          throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_0, null, -1, null);
      }
      return tmp;
    } else {
      var tmp_0;
      if (tmp0_subject instanceof PolymorphicKind) {
        tmp_0 = true;
      } else {
        tmp_0 = equals(tmp0_subject, CLASS_getInstance());
      }
      if (tmp_0) {
        var token_0 = beginStructureImpl$nextToken(parentDecoder, this);
        var tmp0 = token_0 == null ? -1 : token_0.z1_1;
        var tmp_1;
        // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
        if (equals(token_0, null)) {
          tmp_1 = this.j1l_1;
        } else {
          if (tmp0 === 5) {
            tmp_1 = new FlowClassDecoder(this);
          } else {
            if (tmp0 === 7) {
              this.g1l_1.x1m(ensureNotNull(this.g1l_1.z1k_1));
              tmp_1 = new BlockClassDecoder(this, this.g1l_1.x1k_1);
            } else {
              // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
              var hint_1 = 'illegal beginning token ' + toString_1(token_0) + ' on decoding class';
              throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_1, null, -1, null);
            }
          }
        }
        return tmp_1;
      } else {
        if (equals(tmp0_subject, MAP_getInstance())) {
          var token_1 = beginStructureImpl$nextToken(parentDecoder, this);
          var tmp0_0 = token_1 == null ? -1 : token_1.z1_1;
          var tmp_2;
          // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
          if (equals(token_1, null)) {
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_2 = 'Early EOF';
            throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_2, null, -1, null);
          } else {
            if (tmp0_0 === 5) {
              tmp_2 = new FlowMapDecoder(this);
            } else {
              if (tmp0_0 === 7) {
                this.g1l_1.x1m(ensureNotNull(this.g1l_1.z1k_1));
                tmp_2 = new BlockMapDecoder(this, this.g1l_1.x1k_1);
              } else {
                // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
                var hint_3 = 'illegal beginning token ' + toString_1(token_1) + ' on decoding map';
                throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_3, null, -1, null);
              }
            }
          }
          return tmp_2;
        } else {
          if (equals(tmp0_subject, CONTEXTUAL_getInstance())) {
            var token_2 = beginStructureImpl$nextToken(parentDecoder, this);
            var tmp0_1 = token_2 == null ? -1 : token_2.z1_1;
            var tmp_3;
            // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
            if (equals(token_2, null)) {
              // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
              var hint_4 = 'Early EOF';
              throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_4, null, -1, null);
            } else {
              if (tmp0_1 === 5) {
                tmp_3 = new FlowMapDecoder(this);
              } else {
                if (tmp0_1 === 8) {
                  tmp_3 = this.l1l_1;
                } else {
                  if (tmp0_1 === 7) {
                    var beforeRealIndent = this.g1l_1.x1k_1;
                    var beforeIndent = this.g1l_1.x1k_1;
                    var stringValue = ensureNotNull(this.g1l_1.z1k_1);
                    var next = beginStructureImpl$nextToken(parentDecoder, this);
                    var tmp0_2 = next == null ? -1 : next.z1_1;
                    var tmp_4;
                    // Inline function 'net.mamoe.yamlkt.internal.END_OF_FILE' call
                    if (equals(next, null)) {
                      tmp_4 = this.k1l_1;
                    } else {
                      if (tmp0_2 === 1) {
                        this.g1l_1.x1k_1 = beforeIndent;
                        this.g1l_1.i1m(next);
                        this.g1l_1.x1m(stringValue);
                        tmp_4 = new BlockMapDecoder(this, beforeRealIndent);
                      } else {
                        if (tmp0_2 === 7) {
                          this.g1l_1.x1m(ensureNotNull(this.g1l_1.z1k_1));
                          this.g1l_1.z1k_1 = stringValue;
                          tmp_4 = this.k1l_1;
                        } else {
                          this.g1l_1.i1m(next);
                          tmp_4 = this.k1l_1;
                        }
                      }
                    }
                    return tmp_4;
                  } else {
                    if (tmp0_1 === 3) {
                      tmp_3 = new FlowSequenceDecoder(this);
                    } else {
                      if (tmp0_1 === 2) {
                        this.g1l_1.i1m(token_2);
                        tmp_3 = new BlockSequenceDecoder(this, this.g1l_1.x1k_1);
                      } else {
                        // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
                        var hint_5 = 'illegal beginning token ' + toString_1(token_2) + ' on decoding contextual';
                        throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_5, null, -1, null);
                      }
                    }
                  }
                }
              }
            }
            return tmp_3;
          } else {
            // Inline function 'net.mamoe.yamlkt.internal.contextualDecodingException' call
            var hint_6 = 'unsupported SerialKind ' + descriptor.n1g().toString();
            throw contextualDecodingException(this.g1l_1, 'Top-level decoder: ' + hint_6, null, -1, null);
          }
        }
      }
    }
  };
  //region block: post-declaration
  protoOf(AbstractDecoder).u1g = decodeSerializableElement$default;
  protoOf(AbstractDecoder).q1g = decodeSequentially;
  protoOf(AbstractDecoder).s1g = decodeCollectionSize;
  //endregion
  //region block: init
  enabled0 = false;
  logIndent0 = 0;
  decodeValue0 = 0;
  Companion_instance_1 = new Companion_0();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = Default_getInstance;
  //endregion
  return _;
}));

//# sourceMappingURL=yamlkt-root-yamlkt-js-ir.js.map
